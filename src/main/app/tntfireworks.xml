<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:smtps="http://www.mulesoft.org/schema/mule/smtps" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/smtps http://www.mulesoft.org/schema/mule/smtps/current/mule-smtps.xsd">
    <vm:connector name="TNTFIREWORKS_SFTP_TO_DB_VM" validateConnections="true" doc:name="VM"/>
    <vm:connector name="TNTFIREWORKS_DB_TO_SQ_VM" validateConnections="true" doc:name="VM"/>
    <queued-asynchronous-processing-strategy name="TNTFireworks_SyncToDatabase_Async_Strategy" maxThreads="${tntfireworks.syncToDatabase.maxThreads}" minThreads="${tntfireworks.syncToDatabase.minThreads}" poolExhaustedAction="WAIT" threadWaitTimeout="3600000" doc:name="Queued Asynchronous Processing Strategy"/>
    <queued-asynchronous-processing-strategy name="TNTFireworks_DatabaseToSquareWorker_Async_Strategy" maxThreads="${tntfireworks.databaseToSquareWorker.maxThreads}" minThreads="${tntfireworks.databaseToSquareWorker.minThreads}" poolExhaustedAction="WAIT" threadWaitTimeout="1800000" doc:name="Queued Asynchronous Processing Strategy"/>
    <quartz:connector name="Quartz-TNT" validateConnections="true" doc:name="Quartz">
        <quartz:factory-property key="org.quartz.scheduler.instanceName" value="Quartz-TNT"/>
    </quartz:connector>
    <flow name="TNTFireworks:trigger-sftp-to-database">
        <http:listener config-ref="${default.http.config}" path="/tntfireworks/sftptodatabase/${urlKey}" doc:name="HTTPS"/>
        <flow-ref name="TNTFireworks:sync-sftp-to-database" doc:name="TNTFireworks:sync-sftp-to-database"/>
        <set-payload value="Sync of CSV files on SFTP server to database complete" doc:name="Set Payload"/>
    </flow>
    <flow name="TNTFireworks:trigger-database-to-square">
        <http:listener config-ref="${default.http.config}" path="/tntfireworks/databasetosquare/${urlKey}" doc:name="HTTPS"/>
        <flow-ref name="TNTFireworks:sync-database-to-square" doc:name="TNTFireworks:sync-database-to-square"/>
        <set-payload value="Sync of database to Square complete" doc:name="Set Payload"/>
    </flow>
    <flow name="TNTFireworks:generate-location-tokens-for-bank-account-linking">
        <http:listener config-ref="${default.http.config}" path="/tntfireworks/generate-location-tokens/${urlKey}" doc:name="HTTPS"/>
        <logger message="Generating location file for bank account linking" level="INFO" doc:name="Logger"/>
        <flow-ref name="GLOBAL:set-session-vars" doc:name="GLOBAL:set-session-vars"/>
        <component doc:name="GenerateBankLocationTokensCallable">
                <prototype-object class="tntfireworks.GenerateBankLocationTokensCallable"/>
        </component>
        <smtp:outbound-endpoint host="${email.info.sending.server}" user="${email.info.sending.username}" password="${email.info.sending.password}" connector-ref="SES_SMTP_STARTTLS_HTML" to="${tntfireworks.saleseng.recipients}" from="${email.info.sending.from.bridge}" subject="#['${mule.env}'.toUpperCase() + ' - Source / Destination Location Tokens for Bank Account Linking']" responseTimeout="10000" doc:name="Email source/destination location tokens"/>
        <set-payload value="Finished generating source/destination location ids for bank account linking (in SqWeb)" doc:name="Set Payload"/>
    </flow>
    <flow name="TNTFireworks:sftp-cron" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-tntfireworks-csv-sftp-cron-1480949912" cronExpression="0 0/20 * 1/1 * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every 20 minutes" connector-ref="Quartz-TNT">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <choice doc:name="Choice">
            <when expression="#['${tntfireworks.catalogsync.active}' == false]">
                <logger message="TNTFireworks catalog sync disabled" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger message="Checking SFTP server for valid marketing programs and location files" level="INFO" doc:name="Logger"/>
                <flow-ref name="TNTFireworks:sync-sftp-to-database" doc:name="TNTFireworks:sync-sftp-to-database"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="TNTFireworks:sync-sftp-to-database">
        <component doc:name="Check SFTP folders for CSV files">
            <prototype-object class="tntfireworks.PollSFTPCallable"/>
        </component>
        <choice doc:name="Only process non-empty lists">
            <when expression="#[payload == null || payload.size() &lt; 1]">
                <logger message="TNT SFTP Poll: No files to process" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <request-reply doc:name="Request-Reply">
                    <vm:outbound-endpoint exchange-pattern="one-way" path="TNTFireworks:sftp-to-db-queue-worker" connector-ref="TNTFIREWORKS_SFTP_TO_DB_VM" doc:name="TNTFireworks:sftp-to-db-queue-worker">
                        <collection-splitter doc:name="Collection Splitter" enableCorrelation="ALWAYS"/>
                    </vm:outbound-endpoint>
                    <vm:inbound-endpoint exchange-pattern="one-way" path="TNTFireworks:sftp-to-db-queue-reply" connector-ref="TNTFIREWORKS_SFTP_TO_DB_VM" doc:name="TNTFireworks:sftp-to-db-queue-reply">
                        <collection-aggregator failOnTimeout="true" doc:name="Collection Aggregator"/>
                    </vm:inbound-endpoint>
                </request-reply>
                <set-payload value="1" doc:name="Clear payload"/>
                <logger message="SFTP files synced to database" level="INFO" doc:name="Logger"/>
                <vm:outbound-endpoint exchange-pattern="one-way" path="TNTFireworks:kickoff-db-to-square-sync" doc:name="Kickoff Sync to Square" connector-ref="TNTFIREWORKS_DB_TO_SQ_VM"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="TNTFireworks:sftp-to-db-queue-worker" processingStrategy="TNTFireworks_SyncToDatabase_Async_Strategy">
        <vm:inbound-endpoint exchange-pattern="one-way"  doc:name="TNTFireworks:sftp-to-db-queue-worker" connector-ref="TNTFIREWORKS_SFTP_TO_DB_VM" path="TNTFireworks:sftp-to-db-queue-worker"/>
        <logger message="Initiating CSV update for: #[payload.getOriginalFilename()] to database" level="INFO" doc:name="Logger"/>
        <component doc:name="Sync CSV to Database">
            <prototype-object class="tntfireworks.SyncToDatabaseCallable"/>
        </component>
        <logger message="Finished CSV update for: #[payload.getOriginalFilename()] to database" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="TNTFireworks:sync-database-to-square" >
        <vm:inbound-endpoint exchange-pattern="one-way" path="TNTFireworks:kickoff-db-to-square-sync" doc:name="Kickoff Sync to Square" connector-ref="TNTFIREWORKS_DB_TO_SQ_VM"/>
        <logger message="Initiating Database to Square Catalog/Inventory API updates for all necessary TNT deployments" level="INFO" doc:name="Logger"/>
        <set-session-variable variableName="syncType" value="CATALOG" doc:name="syncType=CATALOG"/>
        <flow-ref name="TNTFireworks:deployments-to-square" doc:name="TNTFireworks:catalog-to-square"/>
        <set-session-variable variableName="syncType" value="INVENTORY" doc:name="syncType=INVENTORY"/>
        <flow-ref name="TNTFireworks:deployments-to-square" doc:name="TNTFireworks:inventory-to-square"/>
        <logger message="Completed Database to Square Catalog/Inventory API updates for all necessary TNT deployments" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="TNTFireworks:deployments-to-square" processingStrategy="synchronous">
        <component doc:name="Create deployment payloads">
            <prototype-object class="tntfireworks.TntCatalogSyncDeploymentsCallable"/>
        </component>
        <choice doc:name="Only process non-empty lists">
            <when expression="#[payload == null || payload.size() &lt; 1]">
                <logger message="TNT Sync-Database-To-Square: No deployment payloads to process" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <request-reply doc:name="Request-Reply">
                    <vm:outbound-endpoint exchange-pattern="one-way" path="TNTFireworks:db-sync-queue-worker"  doc:name="TNTFireworks:db-sync-queue-worker" connector-ref="TNTFIREWORKS_DB_TO_SQ_VM">
                        <collection-splitter doc:name="Collection Splitter" enableCorrelation="ALWAYS"/>
                    </vm:outbound-endpoint>
                    <vm:inbound-endpoint exchange-pattern="one-way" path="TNTFireworks:db-sync-reply" connector-ref="TNTFIREWORKS_DB_TO_SQ_VM" doc:name="TNTFireworks:db-sync-reply">
                        <collection-aggregator failOnTimeout="true" doc:name="Collection Aggregator"/>
                    </vm:inbound-endpoint>
                </request-reply>
                <set-payload value="Completed Catalog/Inventory API updates to all necessary TNT deployments." doc:name="Email Payload"/>
                <smtp:outbound-endpoint host="${email.info.sending.server}"  user="${email.info.sending.username}" password="${email.info.sending.password}" connector-ref="SES_SMTP_STARTTLS" to="${tntfireworks.saleseng.recipients}" from="${email.info.sending.from.bridge}" subject="#['${mule.env}'.toUpperCase() + ' - Catalog API UPDATES COMPLETE']" responseTimeout="10000" doc:name="Email DB to SQ Completed"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="TNTFireworks:db-sync-queue-worker" processingStrategy="TNTFireworks_DatabaseToSquareWorker_Async_Strategy">
        <vm:inbound-endpoint exchange-pattern="one-way" path="TNTFireworks:db-sync-queue-worker" connector-ref="TNTFIREWORKS_DB_TO_SQ_VM" doc:name="TNTFireworks:db-sync-queue-worker"/>
        <logger message="#[&quot;Processing Catalog API updated for account: &quot; + payload.getMerchantId()]" level="INFO" doc:name="Logger"/>
        <component doc:name="Database to Square API Updates">
            <prototype-object class="tntfireworks.DatabaseToSquareCallable"/>
        </component>
    </flow>
</mule>

