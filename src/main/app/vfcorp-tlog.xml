<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns:schedulers="http://www.mulesoft.org/schema/mule/schedulers" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz"
	xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/schedulers http://www.mulesoft.org/schema/mule/schedulers/current/mule-schedulers.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd">
    <queued-asynchronous-processing-strategy name="VFC_Report_Asynch_Processing_Strategy" maxThreads="${vfcorp.queuedAsynchronousProcessingStrategy.maxThreads}" minThreads="1" doc:name="Queued Asynchronous Processing Strategy" threadWaitTimeout="${vfcorp.queuedAsynchronousProcessingStrategy.threadWaitTimeout}"></queued-asynchronous-processing-strategy>
    <vm:connector name="VFC_VM_Config" validateConnections="true" doc:name="VM"/>
    <s3:config name="Amazon_S3__Configuration" accessKey="${aws.accesskey}" secretKey="${aws.secretkey}" doc:name="Amazon S3: Configuration">
        <reconnect/>
    </s3:config>
    <flow name="VFC:generate-tlogs-for-locations" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="vfcGenerateTLOGsForLocationsCron" cronExpression="0 30 3 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 3:30am UTC">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <logger message="Starting VFC:generate-tlogs-for-locations flow." level="INFO" doc:name="Logger"/>
    	<!-- TODO: this runs in UTC time. It does not account for daylight savings. -->
        <flow-ref name="GLOBAL:set-session-vars" doc:name="GLOBAL:set-session-vars"/>
        <flow-ref name="VFC:generate-tlogs-for-locations-set-params" doc:name="VFC:generate-tlogs-for-locations-set-params"/>
        <flow-ref name="MI:OAuth:retrieve-tokens" doc:name="MI:OAuth:retrieve-tokens"/>
        <scripting:transformer doc:name="Create payload objects">
            <scripting:script engine="Groovy"><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import vfcorp.TLOGGeneratorPayload;
import util.TimeManager;

List<Map<String,Object>> merchantDatabaseEntries = (List<Map<String,Object>>) payload;
List<TLOGGeneratorPayload> tlogGeneratorPayloads = new ArrayList<TLOGGeneratorPayload>();

for (Map<String,Object> merchantDatabaseEntry : merchantDatabaseEntries) {
    TLOGGeneratorPayload tlogGeneratorPayload = new TLOGGeneratorPayload();
    
    tlogGeneratorPayload.setAccessToken((String) merchantDatabaseEntry.get("token"));
    tlogGeneratorPayload.setMerchantId((String) merchantDatabaseEntry.get("merchantId"));
    tlogGeneratorPayload.setLocationId((String) merchantDatabaseEntry.get("locationId"));
    tlogGeneratorPayload.setMerchantAlias((String) merchantDatabaseEntry.get("merchantAlias"));
    tlogGeneratorPayload.setLegacy((Boolean) merchantDatabaseEntry.get("legacy"));
    
    int offset = Integer.parseInt(flowVars["offset"]);
    
    if ("getPastDayInterval".equals(flowVars["timeMethod"])) {
        int range = Integer.parseInt(flowVars["range"]);
        tlogGeneratorPayload.setParams(TimeManager.getPastDayInterval(range, offset, flowVars["timeZone"]));
    } else if ("getPastTimeInterval".equals(flowVars["timeMethod"])) {
        int seconds = Integer.parseInt(flowVars["seconds"]);
        tlogGeneratorPayload.setParams(TimeManager.getPastTimeInterval(seconds, offset, flowVars["timeZone"]));
    }
    
    tlogGeneratorPayloads.add(tlogGeneratorPayload);
}

return tlogGeneratorPayloads;]]></scripting:script>
        </scripting:transformer>
        <request-reply doc:name="Request-Reply">
            <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-queue-splitter" connector-ref="VFC_VM_Config"/>
            <vm:inbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-reply" connector-ref="VFC_VM_Config"/>
        </request-reply>
        <set-payload value="Done." doc:name="Set Payload"/>
    </flow>
    <flow name="VFC:generate-tlogs-for-locations-queue-splitter">
        <vm:inbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-queue-splitter" connector-ref="VFC_VM_Config"/>
        <collection-splitter doc:name="Collection Splitter"/>
        <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-async-worker" connector-ref="VFC_VM_Config"/>
    </flow>
    <flow name="VFC:generate-tlogs-for-locations-async-worker" processingStrategy="VFC_Report_Asynch_Processing_Strategy">
        <vm:inbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-async-worker" connector-ref="VFC_VM_Config"/>
        <scripting:transformer doc:name="Get locations for business">
            <scripting:script engine="Groovy"><![CDATA[import vfcorp.TLOGGeneratorPayload;
import com.squareup.connect.Merchant;
import com.squareup.connect.SquareClient;

TLOGGeneratorPayload sp = (TLOGGeneratorPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Merchant[] locations = client.businessLocations().list();

sp.setLocations(locations);

return sp;]]></scripting:script>
        </scripting:transformer>
        <scripting:transformer doc:name="Get payments for location">
            <scripting:script engine="Groovy"><![CDATA[import vfcorp.TLOGGeneratorPayload;
import com.squareup.connect.Payment;
import com.squareup.connect.SquareClient;

TLOGGeneratorPayload sp = (TLOGGeneratorPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Payment[] payments = client.payments().list(sp.getParams());

sp.setPayments(payments);

return sp;]]></scripting:script>
        </scripting:transformer>
        <scripting:transformer doc:name="Get items for location">
            <scripting:script engine="Groovy"><![CDATA[import vfcorp.TLOGGeneratorPayload;
import com.squareup.connect.Item;
import com.squareup.connect.SquareClient;

TLOGGeneratorPayload sp = (TLOGGeneratorPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Item[] items = client.items().list();

sp.setItems(items);

return sp;]]></scripting:script>
        </scripting:transformer>
        <scripting:transformer doc:name="Get employees for location">
            <scripting:script engine="Groovy"><![CDATA[import vfcorp.TLOGGeneratorPayload;
import com.squareup.connect.Employee;
import com.squareup.connect.SquareClient;

TLOGGeneratorPayload sp = (TLOGGeneratorPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Employee[] employees = client.employees().list();

sp.setEmployees(employees);

return sp;]]></scripting:script>
        </scripting:transformer>
        <component doc:name="Generate TLOGs">
            <singleton-object class="vfcorp.TLOGGenerator">
                <property key="itemNumberLookupLength" value="${vfcorp.itemNumberLookupLength}"/>
                <property key="timeZoneId" value="${vfcorp.generateTLOGparams.timeMethod.timeZone}"/>
            </singleton-object>
        </component>
        <sftp:outbound-endpoint exchange-pattern="one-way" connector-ref="VFCorpSFTP" outputPattern="#['${vfcorp.generateTLOG.output.namePattern.prefix}' + flowVars.vfcorpStoreNumber + '${vfcorp.generateTLOG.output.namePattern.suffix}']" host="${vfcorp.generateTLOG.output.sftp.host}" port="${vfcorp.generateTLOG.output.sftp.port}" path="${vfcorp.generateTLOG.output.sftp.path}" user="${vfcorp.generateTLOG.output.sftp.username}" password="${vfcorp.generateTLOG.output.sftp.password}" responseTimeout="10000" duplicateHandling="overwrite" doc:name="SFTP">
            <reconnect-forever/>
        </sftp:outbound-endpoint>
        <set-variable variableName="awsFolder" value="Kipling/05019/TLOG/#[server.dateTime.format('YYYYMMddhhmmss_')]" doc:name="AWS bucket folder"/>
        <s3:create-object config-ref="Amazon_S3__Configuration" bucketName="${aws.bucket}" key="#[flowVars.awsFolder + '${vfcorp.generateTLOG.output.namePattern.prefix}' + flowVars.vfcorpStoreNumber + '${vfcorp.generateTLOG.output.namePattern.suffix}']" doc:name="Copy to Amazon S3"/>
        <set-payload value="Done." doc:name="Set Payload"/>
        <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="${email.info.sending.email}" password="${email.info.sending.password}" connector-ref="Gmail" to="${email.info.receiving.email}" from="Square Bridge" subject="#['${mule.env}'.toUpperCase() + ' - New TLOG generated for VF Corporation, location ' + flowVars.vfcorpStoreNumber]" responseTimeout="10000" doc:name="Email to Sales Eng"/>
        <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-queue-aggregator" connector-ref="VFC_VM_Config"/>
    </flow>
    <flow name="VFC:generate-tlogs-for-locations-queue-aggregator">
        <vm:inbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-queue-aggregator" connector-ref="VFC_VM_Config"/>
        <collection-aggregator failOnTimeout="true" doc:name="Collection Aggregator"/>
        <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-reply" connector-ref="VFC_VM_Config"/>
    </flow>
    <sub-flow name="VFC:generate-tlogs-for-locations-set-params">
        <set-variable variableName="deployment" value="${vfcorp.generateTLOGparams.deploymentId}" doc:name="Set deployment ID"/>
        <set-session-variable variableName="deploymentId" value="#[flowVars.deployment]" doc:name="deploymentId (VM safe)"/>
        <set-variable variableName="timeMethod" value="${vfcorp.generateTLOGparams.timeMethod}" doc:name="Set time method"/>
        <set-variable variableName="range" value="${vfcorp.generateTLOGparams.timeMethod.range}" doc:name="Set date range to one day"/>
        <set-variable variableName="seconds" value="${vfcorp.generateTLOGparams.timeMethod.seconds}" doc:name="Set seconds"/>
        <set-variable variableName="offset" value="${vfcorp.generateTLOGparams.timeMethod.offset}" doc:name="Set offset"/>
        <set-variable variableName="timeZone" value="${vfcorp.generateTLOGparams.timeMethod.timeZone}" doc:name="Set time zone"/>
    </sub-flow>
    <flow name="VFC:trigger-generate-tlogs-for-locations">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/vfc-tlogs/jXsEyB.UFz71ZNg" doc:name="/vfc-tlogs"/>
        <flow-ref name="VFC:generate-tlogs-for-locations" doc:name="VFC:generate-tlogs-for-locations"/>
    </flow>
    <flow name="VFC:TNF:trigger-generate-tlogs">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/vfc/tnf-tlogs/jXsEyB.UFz71ZNg/{storeId}" doc:name="/tnf-tlogs"/>
        <flow-ref name="#['VFC:TNF:tlog-store-' + message.inboundProperties.'http.uri.params'.storeId]" doc:name="#['VFC:TNF:tlog-store-' + message.inboundProperties.'http.uri.params'.storeId]"/>
    </flow>
    <sub-flow name="VFC:TNF:generate-tlog-for-location-settings">
        <set-variable variableName="deployment" value="#['vfcorp-tnf-' + flowVars.storeId]" doc:name="Set deployment: vfcorp-tnf-STORE_ID"/>
        <set-variable variableName="awsFolder" value="#['TNF/' + flowVars.storeId + '/TLOG/' + server.dateTime.format('YYYYMMddhhmmss_')]" doc:name="AWS bucket folder"/>
    </sub-flow>
    <sub-flow name="VFC:TNF:generate-tlog-for-location">
        <logger message="Initiating TLOG generation for deployment #[flowVars.deployment]" level="INFO" doc:name="Logger"/>
        <flow-ref name="GLOBAL:set-session-vars" doc:name="GLOBAL:set-session-vars"/>
        <set-session-variable variableName="deploymentId" value="#[flowVars.deployment]" doc:name="deploymentId (VM safe)"/>
        <set-variable variableName="range" value="${vfcorp.generateTLOGparams.timeMethod.range}" doc:name="Set range"/>
        <set-variable variableName="offset" value="${vfcorp.generateTLOGparams.timeMethod.offset}" doc:name="Set offset"/>
        <flow-ref name="MI:OAuth:retrieveToken" doc:name="MI:OAuth:retrieveToken"/>
        <scripting:transformer doc:name="Create payload object">
            <scripting:script engine="Groovy"><![CDATA[import vfcorp.TLOGGeneratorPayload;
import util.TimeManager;

TLOGGeneratorPayload tlogGeneratorPayload = new TLOGGeneratorPayload();

tlogGeneratorPayload.setAccessToken(payload.getAccessToken());
tlogGeneratorPayload.setMerchantId(payload.getMerchantId());
tlogGeneratorPayload.setLocationId(payload.getLocationId());
tlogGeneratorPayload.setMerchantAlias(payload.getMerchantAlias());
tlogGeneratorPayload.setLegacy(payload.isLegacy());

int offset = Integer.parseInt(flowVars["offset"]);
int range = Integer.parseInt(flowVars["range"]);
tlogGeneratorPayload.setParams(TimeManager.getPastDayInterval(range, offset, flowVars["timeZone"]));

return tlogGeneratorPayload;]]></scripting:script>
        </scripting:transformer>
        <scripting:transformer doc:name="Get locations+payments+items+employees for business">
            <scripting:script engine="Groovy"><![CDATA[import vfcorp.TLOGGeneratorPayload;
import com.squareup.connect.Employee;
import com.squareup.connect.Item;
import com.squareup.connect.Merchant;
import com.squareup.connect.Payment;
import com.squareup.connect.SquareClient;

TLOGGeneratorPayload sp = (TLOGGeneratorPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Merchant[] locations = client.businessLocations().list();
Employee[] employees = client.employees().list();
Item[] items = client.items().list();
Payment[] payments = client.payments().list(sp.getParams());

sp.setLocations(locations);
sp.setEmployees(employees);
sp.setPayments(payments);
sp.setItems(items);

return sp;]]></scripting:script>
        </scripting:transformer>
        <component doc:name="Generate TLOGs">
            <singleton-object class="vfcorp.TLOGGenerator">
                <property key="itemNumberLookupLength" value="${vfcorp.itemNumberLookupLength}"/>
                <property key="timeZoneId" value="${vfcorp.generateTLOGparams.timeMethod.timeZone}"/>
            </singleton-object>
        </component>
    </sub-flow>
    <sub-flow name="VFC:TNF:generate-tlog-for-location-finish">
        <s3:create-object config-ref="Amazon_S3__Configuration" bucketName="${aws.bucket}" key="#[flowVars.awsFolder + '${vfcorp.tlog.namePrefix}' + flowVars.vfcorpStoreNumber + '${vfcorp.tlog.nameSuffix}']" doc:name="Copy to Amazon S3"/>
        <logger message="#['Finished generating TLOG for VF Corporation, The North Face location ' + flowVars.vfcorpStoreNumber]" level="INFO" doc:name="Logger"/>
    </sub-flow>
    <flow name="VFC:TNF:tlog-store-1" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="vfcGenerateTLOGsForLocationsCronTNF-store1-1470289523" cronExpression="0 0 5 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 5:00am UTC (10:00pm PST)">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="storeId" value="00001" doc:name="Set storeId: 00001"/>
        <set-variable variableName="timeZone" value="America/Los_Angeles" doc:name="Set timeZone"/>
        <flow-ref name="VFC:TNF:generate-tlog-for-location-settings" doc:name="VFC:TNF:generate-tlog-for-location-settings"/>
        <flow-ref name="VFC:TNF:generate-tlog-for-location" doc:name="VFC:TNF:generate-tlog-for-location"/>
        <sftp:outbound-endpoint exchange-pattern="one-way" connector-ref="VFCorpSFTP" outputPattern="#['${vfcorp.tlog.namePrefix}' + flowVars.vfcorpStoreNumber + '${vfcorp.tlog.nameSuffix}']" host="${vfcorp.sftp.host}" port="${vfcorp.sftp.port}" path="${vfcorp.sftp.path.tnf}${vfcorp.sftp.path.tnf.tlog.store00001}" user="${vfcorp.sftp.username}" password="${vfcorp.sftp.password}" responseTimeout="10000" duplicateHandling="overwrite" doc:name="SFTP">
            <reconnect-forever/>
        </sftp:outbound-endpoint>
        <flow-ref name="VFC:TNF:generate-tlog-for-location-finish" doc:name="VFC:TNF:generate-tlog-for-location-finish"/>
    </flow>
    <flow name="VFC:TNF:tlog-store-60" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="vfcGenerateTLOGsForLocationsCronTNF-store60-1470289523" cronExpression="0 0 5 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 5:00am UTC (10:00pm PST)">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="storeId" value="00060" doc:name="Set storeId: 00060"/>
        <set-variable variableName="timeZone" value="America/Los_Angeles" doc:name="Set timeZone"/>
        <flow-ref name="VFC:TNF:generate-tlog-for-location-settings" doc:name="VFC:TNF:generate-tlog-for-location-settings"/>
        <flow-ref name="VFC:TNF:generate-tlog-for-location" doc:name="VFC:TNF:generate-tlog-for-location"/>
        <sftp:outbound-endpoint exchange-pattern="one-way" connector-ref="VFCorpSFTP" outputPattern="#['${vfcorp.tlog.namePrefix}' + flowVars.vfcorpStoreNumber + '${vfcorp.tlog.nameSuffix}']" host="${vfcorp.sftp.host}" port="${vfcorp.sftp.port}" path="${vfcorp.sftp.path.tnf}${vfcorp.sftp.path.tnf.tlog.store00060}" user="${vfcorp.sftp.username}" password="${vfcorp.sftp.password}" responseTimeout="10000" duplicateHandling="overwrite" doc:name="SFTP">
            <reconnect-forever/>
        </sftp:outbound-endpoint>
        <flow-ref name="VFC:TNF:generate-tlog-for-location-finish" doc:name="VFC:TNF:generate-tlog-for-location-finish"/>
    </flow>
    <flow name="VFC:TNF:tlog-store-64" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="vfcGenerateTLOGsForLocationsCronTNF-store64-1470289523" cronExpression="0 0 5 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 5:00am UTC (10:00pm PST)">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="storeId" value="00064" doc:name="Set storeId: 00064"/>
        <set-variable variableName="timeZone" value="America/Los_Angeles" doc:name="Set timeZone"/>
        <flow-ref name="VFC:TNF:generate-tlog-for-location-settings" doc:name="VFC:TNF:generate-tlog-for-location-settings"/>
        <flow-ref name="VFC:TNF:generate-tlog-for-location" doc:name="VFC:TNF:generate-tlog-for-location"/>
        <sftp:outbound-endpoint exchange-pattern="one-way" connector-ref="VFCorpSFTP" outputPattern="#['${vfcorp.tlog.namePrefix}' + flowVars.vfcorpStoreNumber + '${vfcorp.tlog.nameSuffix}']" host="${vfcorp.sftp.host}" port="${vfcorp.sftp.port}" path="${vfcorp.sftp.path.tnf}${vfcorp.sftp.path.tnf.tlog.store00064}" user="${vfcorp.sftp.username}" password="${vfcorp.sftp.password}" responseTimeout="10000" duplicateHandling="overwrite" doc:name="SFTP">
            <reconnect-forever/>
        </sftp:outbound-endpoint>
        <flow-ref name="VFC:TNF:generate-tlog-for-location-finish" doc:name="VFC:TNF:generate-tlog-for-location-finish"/>
    </flow>
    <flow name="VFC:TNF:tlog-store-73" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="vfcGenerateTLOGsForLocationsCronTNF-store73-1470289523" cronExpression="0 0 5 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 5:00am UTC (10:00pm PST)">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="storeId" value="00073" doc:name="Set storeId: 00073"/>
        <set-variable variableName="timeZone" value="America/Los_Angeles" doc:name="Set timeZone"/>
        <flow-ref name="VFC:TNF:generate-tlog-for-location-settings" doc:name="VFC:TNF:generate-tlog-for-location-settings"/>
        <flow-ref name="VFC:TNF:generate-tlog-for-location" doc:name="VFC:TNF:generate-tlog-for-location"/>
        <sftp:outbound-endpoint exchange-pattern="one-way" connector-ref="VFCorpSFTP" outputPattern="#['${vfcorp.tlog.namePrefix}' + flowVars.vfcorpStoreNumber + '${vfcorp.tlog.nameSuffix}']" host="${vfcorp.sftp.host}" port="${vfcorp.sftp.port}" path="${vfcorp.sftp.path.tnf}${vfcorp.sftp.path.tnf.tlog.store00073}" user="${vfcorp.sftp.username}" password="${vfcorp.sftp.password}" responseTimeout="10000" duplicateHandling="overwrite" doc:name="SFTP">
            <reconnect-forever/>
        </sftp:outbound-endpoint>
        <flow-ref name="VFC:TNF:generate-tlog-for-location-finish" doc:name="VFC:TNF:generate-tlog-for-location-finish"/>
    </flow>
    <flow name="VFC:TNF:tlog-store-402" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="vfcGenerateTLOGsForLocationsCronTNF-store402-1470289523" cronExpression="0 0 5 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 5:00am UTC (10:00pm PST)">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="storeId" value="00402" doc:name="Set storeId: 00402"/>
        <set-variable variableName="timeZone" value="America/Los_Angeles" doc:name="Set timeZone"/>
        <flow-ref name="VFC:TNF:generate-tlog-for-location-settings" doc:name="VFC:TNF:generate-tlog-for-location-settings"/>
        <flow-ref name="VFC:TNF:generate-tlog-for-location" doc:name="VFC:TNF:generate-tlog-for-location"/>
        <sftp:outbound-endpoint exchange-pattern="one-way" connector-ref="VFCorpSFTP" outputPattern="#['${vfcorp.tlog.namePrefix}' + flowVars.vfcorpStoreNumber + '${vfcorp.tlog.nameSuffix}']" host="${vfcorp.sftp.host}" port="${vfcorp.sftp.port}" path="${vfcorp.sftp.path.tnf}${vfcorp.sftp.path.tnf.tlog.store00402}" user="${vfcorp.sftp.username}" password="${vfcorp.sftp.password}" responseTimeout="10000" duplicateHandling="overwrite" doc:name="SFTP">
            <reconnect-forever/>
        </sftp:outbound-endpoint>
        <flow-ref name="VFC:TNF:generate-tlog-for-location-finish" doc:name="VFC:TNF:generate-tlog-for-location-finish"/>
    </flow>
</mule>
