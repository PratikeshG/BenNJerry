<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:schedulers="http://www.mulesoft.org/schema/mule/schedulers" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz"
	xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/schedulers http://www.mulesoft.org/schema/mule/schedulers/current/mule-schedulers.xsd">
    <queued-asynchronous-processing-strategy name="VFC_Report_Asynch_Processing_Strategy" maxThreads="${vfcorp.queuedAsynchronousProcessingStrategy.maxThreads}" minThreads="1" doc:name="Queued Asynchronous Processing Strategy" threadWaitTimeout="${vfcorp.queuedAsynchronousProcessingStrategy.threadWaitTimeout}"></queued-asynchronous-processing-strategy>
    <flow name="VFC:generate-tlogs-for-locations" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="vfcGenerateTLOGsForLocationsCron" cronExpression="0 30 3 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 3:30am UTC">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <logger message="Starting VFC:generate-tlogs-for-locations flow." level="INFO" doc:name="Logger"/>
    	<!-- TODO: this runs in UTC time. It does not account for daylight savings. -->
        <flow-ref name="GLOBAL:set-session-vars" doc:name="GLOBAL:set-session-vars"/>
        <flow-ref name="VFC:generate-tlogs-for-locations-set-params" doc:name="VFC:generate-tlogs-for-locations-set-params"/>
        <flow-ref name="MI:OAuth:retrieve-tokens" doc:name="Get Square OAuth tokens for given deployment ID"/>
        <scripting:transformer doc:name="Create payload objects">
            <scripting:script engine="Groovy"><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import vfcorp.TLOGGeneratorPayload;
import util.TimeManager;

List<Map<String,Object>> merchantDatabaseEntries = (List<Map<String,Object>>) payload;
List<TLOGGeneratorPayload> tlogGeneratorPayloads = new ArrayList<TLOGGeneratorPayload>();

for (Map<String,Object> merchantDatabaseEntry : merchantDatabaseEntries) {
    TLOGGeneratorPayload tlogGeneratorPayload = new TLOGGeneratorPayload();
    
    tlogGeneratorPayload.setAccessToken((String) merchantDatabaseEntry.get("token"));
    tlogGeneratorPayload.setMerchantId((String) merchantDatabaseEntry.get("merchantId"));
    tlogGeneratorPayload.setLocationId((String) merchantDatabaseEntry.get("locationId"));
    tlogGeneratorPayload.setMerchantAlias((String) merchantDatabaseEntry.get("merchantAlias"));
    tlogGeneratorPayload.setLegacy((Boolean) merchantDatabaseEntry.get("legacy"));
    
    int offset = Integer.parseInt(flowVars["offset"]);
    
    if ("getPastDayInterval".equals(flowVars["timeMethod"])) {
        int range = Integer.parseInt(flowVars["range"]);
        tlogGeneratorPayload.setParams(TimeManager.getPastDayInterval(range, offset, flowVars["timeZone"]));
    } else if ("getPastTimeInterval".equals(flowVars["timeMethod"])) {
        int seconds = Integer.parseInt(flowVars["seconds"]);
        tlogGeneratorPayload.setParams(TimeManager.getPastTimeInterval(seconds, offset, flowVars["timeZone"]));
    }
    
    tlogGeneratorPayloads.add(tlogGeneratorPayload);
}

return tlogGeneratorPayloads;]]></scripting:script>
        </scripting:transformer>
        <request-reply doc:name="Request-Reply">
            <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-queue-splitter"/>
            <vm:inbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-reply"/>
        </request-reply>
        <set-payload value="Done." doc:name="Set Payload"/>
    </flow>
    <flow name="VFC:generate-tlogs-for-locations-queue-splitter">
        <vm:inbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-queue-splitter"/>
        <collection-splitter doc:name="Collection Splitter"/>
        <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-async-worker"/>
    </flow>
    <flow name="VFC:generate-tlogs-for-locations-async-worker" processingStrategy="VFC_Report_Asynch_Processing_Strategy">
        <vm:inbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-async-worker"/>
        <scripting:transformer doc:name="Get locations for business">
            <scripting:script engine="Groovy"><![CDATA[import vfcorp.TLOGGeneratorPayload;
import com.squareup.connect.Merchant;
import com.squareup.connect.SquareClient;

TLOGGeneratorPayload sp = (TLOGGeneratorPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Merchant[] locations = client.businessLocations().list();

sp.setLocations(locations);

return sp;]]></scripting:script>
        </scripting:transformer>
        <scripting:transformer doc:name="Get payments for location">
            <scripting:script engine="Groovy"><![CDATA[import vfcorp.TLOGGeneratorPayload;
import com.squareup.connect.Payment;
import com.squareup.connect.SquareClient;

TLOGGeneratorPayload sp = (TLOGGeneratorPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Payment[] payments = client.payments().list(sp.getParams());

sp.setPayments(payments);

return sp;]]></scripting:script>
        </scripting:transformer>
        <scripting:transformer doc:name="Get items for location">
            <scripting:script engine="Groovy"><![CDATA[import vfcorp.TLOGGeneratorPayload;
import com.squareup.connect.Item;
import com.squareup.connect.SquareClient;

TLOGGeneratorPayload sp = (TLOGGeneratorPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Item[] items = client.items().list();

sp.setItems(items);

return sp;]]></scripting:script>
        </scripting:transformer>
        <scripting:transformer doc:name="Get employees for location">
            <scripting:script engine="Groovy"><![CDATA[import vfcorp.TLOGGeneratorPayload;
import com.squareup.connect.Employee;
import com.squareup.connect.SquareClient;

TLOGGeneratorPayload sp = (TLOGGeneratorPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Employee[] employees = client.employees().list();

sp.setEmployees(employees);

return sp;]]></scripting:script>
        </scripting:transformer>
        <component doc:name="Generate TLOGs">
            <singleton-object class="vfcorp.TLOGGenerator">
                <property key="itemNumberLookupLength" value="${vfcorp.itemNumberLookupLength}"/>
                <property key="timeZoneId" value="${vfcorp.generateTLOGparams.timeMethod.timeZone}"/>
            </singleton-object>
        </component>
        <sftp:outbound-endpoint exchange-pattern="one-way" connector-ref="VFCorpSFTP" outputPattern="#['${vfcorp.generateTLOG.output.namePattern.prefix}' + flowVars.vfcorpStoreNumber + '${vfcorp.generateTLOG.output.namePattern.suffix}']" host="${vfcorp.generateTLOG.output.sftp.host}" port="${vfcorp.generateTLOG.output.sftp.port}" path="${vfcorp.generateTLOG.output.sftp.path}" user="${vfcorp.generateTLOG.output.sftp.username}" password="${vfcorp.generateTLOG.output.sftp.password}" responseTimeout="10000" duplicateHandling="overwrite" doc:name="SFTP"/>
        <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="${email.info.sending.email}" password="${email.info.sending.password}" connector-ref="Gmail" to="${email.info.receiving.email}" from="Square Mule" subject="#['${mule.env}'.toUpperCase() + ' - New TLOG generated for VF Corporation, location ' + flowVars.vfcorpStoreNumber]" responseTimeout="10000" doc:name="Email to Sales Eng"/>
        <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-queue-aggregator"/>
    </flow>
    <flow name="VFC:generate-tlogs-for-locations-queue-aggregator">
        <vm:inbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-queue-aggregator"/>
        <collection-aggregator failOnTimeout="true" doc:name="Collection Aggregator"/>
        <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="VFC:generate-tlogs-for-locations-reply"/>
    </flow>
    <sub-flow name="VFC:generate-tlogs-for-locations-set-params">
        <set-variable variableName="deployment" value="${vfcorp.generateTLOGparams.deploymentId}" doc:name="Set deployment ID"/>
        <set-variable variableName="timeMethod" value="${vfcorp.generateTLOGparams.timeMethod}" doc:name="Set time method"/>
        <set-variable variableName="range" value="${vfcorp.generateTLOGparams.timeMethod.range}" doc:name="Set date range to one day"/>
        <set-variable variableName="seconds" value="${vfcorp.generateTLOGparams.timeMethod.seconds}" doc:name="Set seconds"/>
        <set-variable variableName="offset" value="${vfcorp.generateTLOGparams.timeMethod.offset}" doc:name="Set offset"/>
        <set-variable variableName="timeZone" value="${vfcorp.generateTLOGparams.timeMethod.timeZone}" doc:name="Set time zone"/>
    </sub-flow>
    <flow name="VFC:ingest-plu" processingStrategy="synchronous" >
        <sftp:inbound-endpoint connector-ref="VFCorpSFTP" host="${vfcorp.rpc.sftp.host}" port="${vfcorp.rpc.sftp.port}" path="${vfcorp.rpc.sftp.path}" user="${vfcorp.rpc.sftp.username}" password="${vfcorp.rpc.sftp.password}" responseTimeout="${vfcorp.rpc.sftp.timeout}" pollingFrequency="${vfcorp.sftp.pollingFrequency}" doc:name="SFTP, only getting files that start with &quot;plu.chg&quot; (see XML)" tempDir="processing" useTempFileTimestampSuffix="true" doc:description="The filename filter is defined in the XML; it is not shown in this panel.">
        	<file:filename-wildcard-filter pattern="plu.chg*"/>
        </sftp:inbound-endpoint>
        <flow-ref name="GLOBAL:set-session-vars" doc:name="GLOBAL:set-session-vars"/>
        <set-variable variableName="pluStreamReader" value="#[payload]" doc:name="Store stream reader to variable"/>
        <set-variable variableName="deployment" value="${vfcorp.generateTLOGparams.deploymentId}" doc:name="Set deployment ID"/>
        <flow-ref name="MI:OAuth:retrieve-tokens" doc:name="retrieveToken"/>
        <scripting:transformer doc:name="Create payload objects">
            <scripting:script engine="Groovy"><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import vfcorp.RPCIngesterPayload;
import util.TimeManager;

List<Map<String,Object>> merchantDatabaseEntries = (List<Map<String,Object>>) payload;
List<RPCIngesterPayload> rpcIngesterPayloads = new ArrayList<RPCIngesterPayload>();

for (Map<String,Object> merchantDatabaseEntry : merchantDatabaseEntries) {
    RPCIngesterPayload rpcIngesterPayload = new RPCIngesterPayload();
    
    rpcIngesterPayload.setAccessToken((String) merchantDatabaseEntry.get("token"));
    rpcIngesterPayload.setMerchantId((String) merchantDatabaseEntry.get("merchantId"));
    rpcIngesterPayload.setLocationId((String) merchantDatabaseEntry.get("locationId"));
    rpcIngesterPayload.setMerchantAlias((String) merchantDatabaseEntry.get("merchantAlias"));
    rpcIngesterPayload.setLegacy((Boolean) merchantDatabaseEntry.get("legacy"));
    
    rpcIngesterPayloads.add(rpcIngesterPayload);
}

return rpcIngesterPayloads;]]></scripting:script>
        </scripting:transformer>
        <foreach doc:name="For Each">
            <flow-ref name="VFC:ingest-plu-work" doc:name="VFC:ingest-plu-work"/>
        </foreach>
    </flow>
    <sub-flow name="VFC:ingest-plu-work">
        <scripting:transformer doc:name="Get items for location">
            <scripting:script engine="Groovy"><![CDATA[import vfcorp.RPCIngesterPayload;
import com.squareup.connect.Item;
import com.squareup.connect.SquareClient;

RPCIngesterPayload sp = (RPCIngesterPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Item[] items = client.items().list();

sp.setItems(items);

return sp;]]></scripting:script>
        </scripting:transformer>
        <scripting:transformer doc:name="Get categories for location">
            <scripting:script engine="Groovy"><![CDATA[import vfcorp.RPCIngesterPayload;
import com.squareup.connect.Category;
import com.squareup.connect.SquareClient;

RPCIngesterPayload sp = (RPCIngesterPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Category[] categories = client.categories().list();

sp.setCategories(categories);

return sp;]]></scripting:script>
        </scripting:transformer>
        <scripting:transformer doc:name="Get fees for location">
            <scripting:script engine="Groovy"><![CDATA[import vfcorp.RPCIngesterPayload;
import com.squareup.connect.Fee;
import com.squareup.connect.SquareClient;

RPCIngesterPayload sp = (RPCIngesterPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Fee[] fees = client.fees().list();

sp.setFees(fees);

return sp;]]></scripting:script>
        </scripting:transformer>
        <component doc:name="Ingest PLU">
            <singleton-object class="vfcorp.RPCIngester">
                <property key="apiUrl" value="${api.url}"/>
                <property key="apiVersion" value="${api.version}"/>
                <property key="itemNumberLookupLength" value="${vfcorp.itemNumberLookupLength}"/>
                <property key="suspiciousNumberOfRecordsCheck" value="${vfcorp.rpc.suspiciousNumberOfRecordsCheck}"/>
                <property key="suspiciousNumberOfRecords" value="${vfcorp.rpc.suspiciousNumberOfRecords}"/>
                <property key="onlyAddsCheck" value="${vfcorp.rpc.onlyAddsCheck}"/>
            </singleton-object>
        </component>
        <set-payload value="New PLU file ingested by VFCorp." doc:name="Set Payload"/>
        <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="${email.info.sending.email}" password="${email.info.sending.password}" connector-ref="Gmail" to="${email.info.receiving.email}" from="Square Mule" subject="#['${mule.env}'.toUpperCase() + ' - New PLU ingested by VFCorp']" responseTimeout="10000" doc:name="Email to Sales Eng"/>
    </sub-flow>
</mule>
