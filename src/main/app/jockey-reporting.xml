<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ssl="http://www.mulesoft.org/schema/mule/ssl" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ssl http://www.mulesoft.org/schema/mule/ssl/current/mule-ssl.xsd">
	<vm:connector name="JOCKEY_REPORTING_VM" validateConnections="true" doc:name="VM"/>
    <queued-asynchronous-processing-strategy name="Jockey_Reporting_Async_Processing_Strategy" maxThreads="${jockey.reporting.maxThreads}" doc:name="Queued Asynchronous Processing Strategy" minThreads="1" poolExhaustedAction="WAIT" threadWaitTimeout="7200000"/>
    <quartz:connector name="Quartz-Jockey" validateConnections="true" doc:name="Quartz"/>
        <sftp:connector name="SFTP-Jockey" validateConnections="true" doc:name="SFTP"/>
    <flow name="Jockey-trigger-tlog">
        <http:listener config-ref="${default.http.config}" path="/jockey/tlog/${urlKey}" doc:name="/jockey/report"/>
        <set-session-variable variableName="offset" value="#[message.inboundProperties.'http.query.params'.offset != null ? message.inboundProperties.'http.query.params'.offset : &quot;1&quot;]" doc:name="Set offset"/>
        <set-session-variable variableName="range" value="#[message.inboundProperties.'http.query.params'.range != null ? message.inboundProperties.'http.query.params'.range : &quot;1&quot;]" doc:name="Set range"/>
        <set-session-variable variableName="locationOverride" value="#[message.inboundProperties.'http.query.params'.locationOverride != null ? message.inboundProperties.'http.query.params'.locationOverride : &quot;&quot;]" doc:name="Set locationOverride"/>
        <flow-ref name="Jockey-generate-tlog" doc:name="Jockey-generate-tlog"/>
        <set-payload value="Jockey TLOG job triggered with offset: #[sessionVars.offset]; range: #[sessionVars.range]; locationOverride: #[sessionVars.locationOverride]" doc:name="Response message"/>
    </flow>
    <flow name="Jockey-daily-tlog-cron" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-jockey-PST-1574969999" cronExpression="0 05 0 * * ? *" cronTimeZone="America/Los_Angeles" repeatInterval="0" connector-ref="Quartz-Jockey" responseTimeout="10000" doc:name="Run every day at 12:05pm PST">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <choice doc:name="Choice">
            <when expression="#['${jockey.reporting.tlog.active}' == false]">
                <logger message="Jockey TLOG Reporting Disabled" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <set-session-variable variableName="offset" value="1" doc:name="Set offset"/>
                <set-session-variable variableName="range" value="1" doc:name="Set range"/>
                <set-session-variable variableName="locationOverride" value="#[&quot;&quot;]" doc:name="Set locationOverride"/>
                <flow-ref name="Jockey-generate-tlog" doc:name="Jockey-generate-tlog"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="Jockey-generate-tlog">
        <logger message="Begin generating Jockey TLOG Reporting" level="INFO" doc:name="Logger"/>
        <flow-ref name="GLOBAL:set-session-vars" doc:name="GLOBAL:set-session-vars"/>
        <set-variable variableName="deployment" value="${jockey.deployment}" doc:name="Deployment ID"/>
        <flow-ref name="MI:OAuth:retrieveToken" doc:name="MI:OAuth:retrieveToken"/>
        <flow-ref name="Jockey-process-locations" doc:name="Jockey-process-locations"/>
        <logger message="Completed Jockey TLOG Reporting flow" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="Jockey-process-locations">
        <component class="jockey.MerchantDataCallable" doc:name="Get MerchantDataCallable"/>
        <request-reply doc:name="Request-Reply">
            <vm:outbound-endpoint exchange-pattern="one-way" path="Jockey-process-locations-queue-async-worker" connector-ref="JOCKEY_REPORTING_VM" doc:name="Jockey-process-locations-queue-async-worker">
                <collection-splitter doc:name="Collection Splitter" enableCorrelation="ALWAYS"/>
            </vm:outbound-endpoint>
            <vm:inbound-endpoint exchange-pattern="one-way" path="Jockey-process-locations-queue-reply" connector-ref="JOCKEY_REPORTING_VM" doc:name="Jockey-process-locations-queue-reply">
                <collection-aggregator failOnTimeout="true" doc:name="Collection Aggregator"/>
            </vm:inbound-endpoint>
        </request-reply>
        <logger message="Successfully completed all Jockey locations TLOG processing." level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="Jockey-process-locations-queue-async-worker" processingStrategy="Jockey_Reporting_Async_Processing_Strategy">
        <vm:inbound-endpoint exchange-pattern="one-way" path="Jockey-process-locations-queue-async-worker" connector-ref="JOCKEY_REPORTING_VM" doc:name="Jockey-process-locations-queue-async-worker"/>
        <logger message="#[&quot;Retrieving Jockey location details for deployment: &quot; + payload.getName()]" level="INFO" doc:name="Logger"/>
        <component doc:name="Generate TLOG for location">
            <singleton-object class="jockey.GenerateLocationTlogCallable"/>
        </component>
        <choice doc:name="Choice">
            <when expression="#[payload != 0]">
                <dw:transform-message doc:name="Transform Message" metadata:id="436b09f1-3d77-4a34-8772-171ab8d7c895">
                    <dw:input-payload doc:sample="sample_data/list_ArrayList.dwl"/>
                    <dw:set-payload><![CDATA[%dw 2.0
%input payload application/java
%output application/xml skipNullOn="everywhere",inlineCloseOn="empty" 
%namespace ns0 http://Square.CustomSchemas.TransactionCollection
---
{
	ns0#SalesOrderCollection: { (payload map {
		ns0#SalesOrder @(ThirdPartyOrderId: $.thirdPartyOrderId,
			TransactionNumber: $.transactionNumber,
			StoreNumber: $.storeNumber,
			Created: $.dateCreated,
			Completed: $.dateCompleted,
			SalesOrderCode: $.salesOrderCode,
			RegisterNumber: $.registerNumber,
			Cashier: $.cashier,
			ShippingTotal: $.shippingTotal,
			TaxTotal: $.taxTotal,
			Total: $.total
		): {
			ns0#PaymentCollection: { ($.payments map {
				ns0#Payment @(ThirdPartyPaymentId: $.paymentId,
				PaymentCode: $.paymentCode,
				Amount: $.amount
				): ""
			})},
			ns0#LineItemCollection: { ($.lineItems map {
				ns0#LineItem @(
					ThirdPartyLineItemId: $.thirdPartyLineItemId,
					LineNumber: $.lineNumber,
					LineCode: $.lineCode,
					Sku: $.sku,
					Upc: $.upc,
					Quantity: $.quantity,
					DisplayName: $.displayName,
					ListPrice: $.listPrice,
					PlacedPrice: $.placedPrice,
					DiscountedItemPrice: $.discountedItemPrice,
					ExtendedPrice: $.extendedPrice,
					OrderLevelDiscountAmount: $.orderLevelDiscountAmount,
					LineItemDiscountAmount: $.lineItemDiscountAmount
				): {
					ns0#WeaklyTypedProperties: { ($.weaklyTypedProperties map {
						ns0#WeaklyTypedProperty @(Name: $.name,
						Type: $.type,
						Value: $.value
						): ""
					})}
				}
			})}
		}
	}) }
}]]></dw:set-payload>
                </dw:transform-message>
                <set-variable variableName="fileName" value="#[flowVars.storeNumber]_#[function:datestamp:yyyy-MM-dd'T'HHmmss].xml" doc:name="Set Filename"/>
                <component doc:name="Archive to GCP and Upload to SFTP">
		            <singleton-object class="jockey.ArchiveAndUploadToSftpCallable"/>
		        </component>
            </when>
            <otherwise>
                <logger message="Skipping!" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </flow>
</mule>
