<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:schedulers="http://www.mulesoft.org/schema/mule/schedulers" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/schedulers http://www.mulesoft.org/schema/mule/schedulers/current/mule-schedulers.xsd">
    <queued-asynchronous-processing-strategy name="Urbanspace_Report_Async_Processing_Strategy" maxThreads="${urbanspace.maxThreads}" minThreads="1" doc:name="Queued Asynchronous Processing Strategy" poolExhaustedAction="WAIT" threadWaitTimeout="1800000"></queued-asynchronous-processing-strategy>
    <vm:connector name="Urbanspace_VM_Config" validateConnections="true" doc:name="VM"/>
    <flow name="Urbanspace:generate-individual-and-aggregate-reports">
        <logger message="Starting Urbanspace:generate-individual-and-aggregate-reports (#[flowVars.deployment])" level="INFO" doc:name="Logger"/>
        <flow-ref name="GLOBAL:set-session-vars" doc:name="GLOBAL:set-session-vars"/>
        <flow-ref name="MI:OAuth:retrieve-tokens" doc:name="retrieveToken"/>
        <scripting:transformer doc:name="Create payload objects">
            <scripting:script engine="Groovy"><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import urbanspace.ReportGeneratorPayload;
import util.TimeManager;

List<Map<String,Object>> merchantDatabaseEntries = (List<Map<String,Object>>) payload;
List<ReportGeneratorPayload> reportGeneratorPayloads = new ArrayList<ReportGeneratorPayload>();

for (Map<String,Object> merchantDatabaseEntry : merchantDatabaseEntries) {
	ReportGeneratorPayload reportGeneratorPayload = new ReportGeneratorPayload();
	
	reportGeneratorPayload.setAccessToken((String) merchantDatabaseEntry.get("token"));
	reportGeneratorPayload.setMerchantId((String) merchantDatabaseEntry.get("merchantId"));
	reportGeneratorPayload.setLocationId((String) merchantDatabaseEntry.get("locationId"));
	reportGeneratorPayload.setMerchantAlias((String) merchantDatabaseEntry.get("merchantAlias"));
	reportGeneratorPayload.setLegacy((Boolean) merchantDatabaseEntry.get("legacy"));

	int offset = Integer.parseInt(sessionVars["offset"]);
	int range = Integer.parseInt(sessionVars["range"]);

	reportGeneratorPayload.setParams(TimeManager.getPastDayInterval(range, offset, sessionVars["timeZone"]));
	reportGeneratorPayloads.add(reportGeneratorPayload);
}

return reportGeneratorPayloads;]]></scripting:script>
        </scripting:transformer>
        <request-reply doc:name="Request-Reply">
            <vm:outbound-endpoint exchange-pattern="one-way" path="Urbanspace:generate-individual-and-aggregate-reports-queue-splitter" doc:name="VM" connector-ref="Urbanspace_VM_Config"/>
            <vm:inbound-endpoint exchange-pattern="one-way" path="Urbanspace:generate-individual-and-aggregate-reports-reply" doc:name="VM" connector-ref="Urbanspace_VM_Config"/>
        </request-reply>
        <flow-ref name="Urbanspace:convert-api-results-to-csvs" doc:name="Urbanspace:convert-api-results-to-csvs"/>
        <set-payload value="Operation completed." doc:name="Set Payload"/>
    </flow>
    <flow name="Urbanspace:generate-individual-and-aggregate-reports-queue-splitter">
        <vm:inbound-endpoint exchange-pattern="one-way" path="Urbanspace:generate-individual-and-aggregate-reports-queue-splitter" doc:name="VM" connector-ref="Urbanspace_VM_Config"/>
        <collection-splitter doc:name="Collection Splitter"/>
        <vm:outbound-endpoint exchange-pattern="one-way" path="Urbanspace:generate-individual-and-aggregate-reports-async-worker" doc:name="VM" connector-ref="Urbanspace_VM_Config"/>
    </flow>
    <flow name="Urbanspace:generate-individual-and-aggregate-reports-async-worker" processingStrategy="Urbanspace_Report_Async_Processing_Strategy">
        <vm:inbound-endpoint exchange-pattern="one-way" path="Urbanspace:generate-individual-and-aggregate-reports-async-worker" connector-ref="Urbanspace_VM_Config" doc:name="VM"/>
        <scripting:transformer doc:name="Get payments for location">
            <scripting:script engine="Groovy"><![CDATA[import urbanspace.ReportGeneratorPayload;
import com.squareup.connect.Payment;
import com.squareup.connect.SquareClient;

ReportGeneratorPayload sp = (ReportGeneratorPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Payment[] payments = client.payments().list(sp.getParams());

sp.setPayments(payments);

return sp;]]></scripting:script>
        </scripting:transformer>
        <scripting:transformer doc:name="Get refunds for location">
            <scripting:script engine="Groovy"><![CDATA[import urbanspace.ReportGeneratorPayload;
import com.squareup.connect.Refund;
import com.squareup.connect.SquareClient;

ReportGeneratorPayload sp = (ReportGeneratorPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Refund[] refunds = client.refunds().list(sp.getParams());

sp.setRefunds(refunds);

return sp;]]></scripting:script>
        </scripting:transformer>
        <scripting:transformer doc:name="Get payments for all refunds for location">
            <scripting:script engine="Groovy"><![CDATA[import urbanspace.ReportGeneratorPayload;
import com.squareup.connect.Payment;
import com.squareup.connect.Refund;
import com.squareup.connect.SquareClient;

ReportGeneratorPayload sp = (ReportGeneratorPayload) payload;

if (sp.getRefunds() != null) {
	Refund[] squareRefunds = (Refund[]) sp.getRefunds();
	
	SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());
	
    List<Payment> squareRefundPayments = new LinkedList<Payment>();
    
    for (Refund squareRefund : squareRefunds) {
    	squareRefundPayments.add(client.payments().retrieve(squareRefund.getPaymentId()));
    }
    
    sp.setRefundPayments(squareRefundPayments.toArray(new Payment[squareRefundPayments.size()]));
}

return sp;]]></scripting:script>
        </scripting:transformer>
        <scripting:transformer doc:name="Get categories for location">
            <scripting:script engine="Groovy"><![CDATA[import urbanspace.ReportGeneratorPayload;
import com.squareup.connect.Category;
import com.squareup.connect.SquareClient;

ReportGeneratorPayload sp = (ReportGeneratorPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Category[] categories = client.categories().list();

sp.setCategories(categories);

return sp;]]></scripting:script>
        </scripting:transformer>
        <scripting:transformer doc:name="Get discounts for location">
            <scripting:script engine="Groovy"><![CDATA[import urbanspace.ReportGeneratorPayload;
import com.squareup.connect.Discount;
import com.squareup.connect.SquareClient;

ReportGeneratorPayload sp = (ReportGeneratorPayload) payload;

SquareClient client = new SquareClient(sp.getAccessToken(), sessionVars['apiUrl'], sessionVars['apiVersion'], sp.getMerchantId(), sp.getLocationId());

Discount[] discounts = client.discounts().list();

sp.setDiscounts(discounts);

return sp;]]></scripting:script>
        </scripting:transformer>
        <vm:outbound-endpoint exchange-pattern="one-way" path="Urbanspace:generate-individual-and-aggregate-reports-queue-aggregator" connector-ref="Urbanspace_VM_Config" doc:name="VM"/>
    </flow>
    <flow name="Urbanspace:generate-individual-and-aggregate-reports-queue-aggregator">
        <vm:inbound-endpoint exchange-pattern="one-way" path="Urbanspace:generate-individual-and-aggregate-reports-queue-aggregator" doc:name="VM" connector-ref="Urbanspace_VM_Config"/>
        <collection-aggregator failOnTimeout="true" doc:name="Collection Aggregator"/>
        <vm:outbound-endpoint exchange-pattern="one-way" path="Urbanspace:generate-individual-and-aggregate-reports-reply" doc:name="VM" connector-ref="Urbanspace_VM_Config"/>
    </flow>
    <sub-flow name="Urbanspace:convert-api-results-to-csvs">
        <component doc:name="Calculate UrbanSpace Aggregate Totals">
            <singleton-object class="urbanspace.ReportGenerator">
            </singleton-object>
        </component>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <set-payload value="Attached." doc:name="Set Payload"/>
        <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="${email.info.sending.email}" password="${email.info.sending.password}" connector-ref="Gmail"  from="Square Bridge" subject="#[('${mule.env}'.equals(&quot;production&quot;) ? '' : '${mule.env}'.toUpperCase() + ' - ') + 'Urbanspace - ' + sessionVars.deploymentName + ' - Daily Aggregate Report']" responseTimeout="10000" doc:name="Email results" bcc="#[sessionVars.emails]"/>
    </sub-flow>
    <flow name="Urbanspace:trigger-reports">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/urbanspace/reports/${urlKey}" allowedMethods="GET" doc:name="/urbanspace/reports" doc:description="/urbanspace/reports/${urlKey}?deployment=DEPLOYMENT&amp;deploymentName=NAME&amp;range=1&amp;offset=1&amp;timeZone=America/New_York&amp;emails=EMAIL"/>
        <logger message="#['Starting UrbanSpace: ' + message.inboundProperties.'http.query.params'.deployment]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="deployment" value="#[message.inboundProperties.'http.query.params'.deployment]" doc:name="Deployment ID"/>
        <set-session-variable variableName="deploymentName" value="#[message.inboundProperties.'http.query.params'.deploymentName]" doc:name="Deployment Name"/>
        <set-session-variable variableName="range" value="#[message.inboundProperties.'http.query.params'.range]" doc:name="Time range"/>
        <set-session-variable variableName="offset" value="#[message.inboundProperties.'http.query.params'.offset]" doc:name="Time offset"/>
        <set-session-variable variableName="timeZone" value="#[message.inboundProperties.'http.query.params'.timeZone]" doc:name="Timezone"/>
        <set-session-variable variableName="emails" value="#[message.inboundProperties.'http.query.params'.emails]" doc:name="Emails"/>
        <flow-ref name="Urbanspace:generate-individual-and-aggregate-reports" doc:name="Urbanspace:generate-individual-and-aggregate-reports"/>
        <set-payload value="Done." doc:name="Set Payload"/>
    </flow>
    <flow name="Urbanspace:Broadway-Bites">
        <quartz:inbound-endpoint jobName="urbanspace-bbites-1476247908" cronExpression="0 0 7 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 7:00am UTC (2:00am EST)">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <choice doc:name="active?">
            <when expression="#['${urbanspace.bbites.active}' == false]">
                <logger message="Urbanspace:Broadway-Bites disabled. Not performing report generation." level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger message="Starting Urbanspace: Broadway Bites" level="INFO" doc:name="Logger"/>
                <set-variable variableName="deployment" value="${urbanspace.bbites.deploymentId}" doc:name="Deployment ID"/>
                <set-session-variable variableName="deploymentName" value="${urbanspace.bbites.deploymentName}" doc:name="Deployment Name"/>
                <set-session-variable variableName="range" value="${urbanspace.bbites.time.range}" doc:name="Time range"/>
                <set-session-variable variableName="offset" value="${urbanspace.bbites.time.offset}" doc:name="Time offset"/>
                <set-session-variable variableName="timeZone" value="${urbanspace.bbites.time.timeZone}" doc:name="Timezone"/>
                <set-session-variable variableName="emails" value="${urbanspace.results.email}" doc:name="Emails"/>
                <flow-ref name="Urbanspace:generate-individual-and-aggregate-reports" doc:name="Urbanspace:generate-individual-and-aggregate-reports"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="Urbanspace:Madison-Square-Eats">
        <quartz:inbound-endpoint jobName="urbanspace-mse-1473715398" cronExpression="0 0 7 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 7:00am UTC (2:00am EST)">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <choice doc:name="active?">
            <when expression="#['${urbanspace.mse.active}' == false]">
                <logger message="Urbanspace:Madison-Square-Eats disabled. Not performing report generation." level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger message="Starting Urbanspace: Madison Square Eats" level="INFO" doc:name="Logger"/>
                <set-variable variableName="deployment" value="${urbanspace.mse.deploymentId}" doc:name="Deployment ID"/>
                <set-session-variable variableName="deploymentName" value="${urbanspace.mse.deploymentName}" doc:name="Deployment Name"/>
                <set-session-variable variableName="range" value="${urbanspace.mse.time.range}" doc:name="Time range"/>
                <set-session-variable variableName="offset" value="${urbanspace.mse.time.offset}" doc:name="Time offset"/>
                <set-session-variable variableName="timeZone" value="${urbanspace.mse.time.timeZone}" doc:name="Timezone"/>
                <set-session-variable variableName="emails" value="${urbanspace.results.email}" doc:name="Emails"/>
                <flow-ref name="Urbanspace:generate-individual-and-aggregate-reports" doc:name="Urbanspace:generate-individual-and-aggregate-reports"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="Urbanspace:Vanderbilt">
        <quartz:inbound-endpoint jobName="urbanspace-vanderbilt-1476828111" cronExpression="0 0 7 ? * SUN *" repeatInterval="0" responseTimeout="10000" doc:name="Run every Sunday at 7:00am UTC (2:00am EST) for sales prev Sunday - Saturday">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <choice doc:name="active?">
            <when expression="#['${urbanspace.vanderbilt.active}' == false]">
                <logger message="Urbanspace:Vanderbilt disabled. Not performing report generation." level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger message="Starting Urbanspace: Vanderbilt Market" level="INFO" doc:name="Logger"/>
                <set-variable variableName="deployment" value="${urbanspace.vanderbilt.deploymentId}" doc:name="Deployment ID"/>
                <set-session-variable variableName="deploymentName" value="${urbanspace.vanderbilt.deploymentName}" doc:name="Deployment Name"/>
                <set-session-variable variableName="range" value="${urbanspace.vanderbilt.time.range}" doc:name="Time range"/>
                <set-session-variable variableName="offset" value="${urbanspace.vanderbilt.time.offset}" doc:name="Time offset"/>
                <set-session-variable variableName="timeZone" value="${urbanspace.vanderbilt.time.timeZone}" doc:name="Timezone"/>
                <set-session-variable variableName="emails" value="${urbanspace.results.email}" doc:name="Emails"/>
                <flow-ref name="Urbanspace:generate-individual-and-aggregate-reports" doc:name="Urbanspace:generate-individual-and-aggregate-reports"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="Urbanspace:Garment-District">
        <quartz:inbound-endpoint jobName="urbanspace-garment-1473715398" cronExpression="0 0 7 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 7:00am UTC (2:00am EST)">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <choice doc:name="active?">
            <when expression="#['${urbanspace.garment.active}' == false]">
                <logger message="Urbanspace:Garment-Distric disabled. Not performing report generation." level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger message="Starting Urbanspace: Garment District" level="INFO" doc:name="Logger"/>
                <set-variable variableName="deployment" value="${urbanspace.garment.deploymentId}" doc:name="Deployment ID"/>
                <set-session-variable variableName="deploymentName" value="${urbanspace.garment.deploymentName}" doc:name="Deployment Name"/>
                <set-session-variable variableName="range" value="${urbanspace.garment.time.range}" doc:name="Time range"/>
                <set-session-variable variableName="offset" value="${urbanspace.garment.time.offset}" doc:name="Time offset"/>
                <set-session-variable variableName="timeZone" value="${urbanspace.garment.time.timeZone}" doc:name="Timezone"/>
                <set-session-variable variableName="emails" value="${urbanspace.results.email}" doc:name="Emails"/>
                <flow-ref name="Urbanspace:generate-individual-and-aggregate-reports" doc:name="Urbanspace:generate-individual-and-aggregate-reports"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="Urbanspace:Bryant-Park">
        <quartz:inbound-endpoint jobName="urbanspace-bryantpark-1476829238" cronExpression="0 0 7 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 7:00am UTC (2:00am EST)">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <choice doc:name="active?">
            <when expression="#['${urbanspace.bryantpark.active}' == false]">
                <logger message="Urbanspace:Bryant-Park disabled. Not performing report generation." level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger message="Starting Urbanspace: Bryant Park" level="INFO" doc:name="Logger"/>
                <set-variable variableName="deployment" value="${urbanspace.bryantpark.deploymentId}" doc:name="Deployment ID"/>
                <set-session-variable variableName="deploymentName" value="${urbanspace.bryantpark.deploymentName}" doc:name="Deployment Name"/>
                <set-session-variable variableName="range" value="${urbanspace.bryantpark.time.range}" doc:name="Time range"/>
                <set-session-variable variableName="offset" value="${urbanspace.bryantpark.time.offset}" doc:name="Time offset"/>
                <set-session-variable variableName="timeZone" value="${urbanspace.bryantpark.time.timeZone}" doc:name="Timezone"/>
                <set-session-variable variableName="emails" value="${urbanspace.results.email}" doc:name="Emails"/>
                <flow-ref name="Urbanspace:generate-individual-and-aggregate-reports" doc:name="Urbanspace:generate-individual-and-aggregate-reports"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="Urbanspace:Roosevelt">
        <quartz:inbound-endpoint jobName="urbanspace-roosevelt-1479862485 " cronExpression="0 0 7 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 7:00am UTC (2:00am EST)">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <choice doc:name="active?">
            <when expression="#['${urbanspace.roosevelt.active}' == false]">
                <logger message="Urbanspace:Roosevelt disabled. Not performing report generation." level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger message="Starting Urbanspace: Roosevelt Field" level="INFO" doc:name="Logger"/>
                <set-variable variableName="deployment" value="${urbanspace.roosevelt.deploymentId}" doc:name="Deployment ID"/>
                <set-session-variable variableName="deploymentName" value="${urbanspace.roosevelt.deploymentName}" doc:name="Deployment Name"/>
                <set-session-variable variableName="range" value="${urbanspace.roosevelt.time.range}" doc:name="Time range"/>
                <set-session-variable variableName="offset" value="${urbanspace.roosevelt.time.offset}" doc:name="Time offset"/>
                <set-session-variable variableName="timeZone" value="${urbanspace.roosevelt.time.timeZone}" doc:name="Timezone"/>
                <set-session-variable variableName="emails" value="${urbanspace.results.email}" doc:name="Emails"/>
                <flow-ref name="Urbanspace:generate-individual-and-aggregate-reports" doc:name="Urbanspace:generate-individual-and-aggregate-reports"/>
            </otherwise>
        </choice>
    </flow>
</mule>
