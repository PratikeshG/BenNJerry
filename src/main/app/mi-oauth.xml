<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:schedulers="http://www.mulesoft.org/schema/mule/schedulers" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/schedulers http://www.mulesoft.org/schema/mule/schedulers/current/mule-schedulers.xsd">
    <quartz:connector name="Quartz-OAuth" validateConnections="true" doc:name="Quartz">
        <quartz:factory-property key="org.quartz.scheduler.instanceName" value="Quartz-OAuth"/>
    </quartz:connector>
    <flow name="MI:OAuth:create-token">
        <http:listener config-ref="${default.http.config}" path="/createToken" doc:name="HTTPS"/>
        <choice doc:name="Prompt user to add deployment URI parameter">
            <when expression="#[message.inboundProperties.'http.query.params'.deployment == null]">
                <set-payload value="You must provide a URI parameter, &quot;deployment&quot;, which denotes the deployment name." doc:name="Inform user of missing URI parameter"/>
            </when>
            <when expression="#[message.inboundProperties.'http.query.params'.scope == null]">
                <set-payload value="You must provide a URI parameter, &quot;scope&quot;, which denotes the requested Connect permission scopes." doc:name="Inform user of missing Connect permissions scope"/>
            </when>
            <when expression="#[message.inboundProperties.'http.query.params'.alias == null]">
                <set-payload value="You must provide a URI parameter, &quot;alias&quot;, which denotes the Nickname/Alias for this integration." doc:name="Inform user of missing account Nickname parameter"/>
            </when>
            <otherwise>
                <component doc:name="Generate state variable">
                    <prototype-object class="util.oauth.StateVariableGenerator"/>
                </component>
                <parse-template location="static/bridge-oauth-redirect-state.html" doc:name="Parse Template"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="MI:OAuth:callback">
        <http:listener config-ref="${default.http.config}" path="/callback" doc:name="HTTPS"/>
        <component class="util.oauth.StateVariableParser" doc:name="Verify State Token"/>
        <choice doc:name="Route based on valid state variable">
            <when expression="#[flowVars.deployment != null &amp;&amp; flowVars.code != null]">
                <component doc:name="Convert OAuth code to token">
					<prototype-object class="util.oauth.CodeToTokenConverter"/>
                </component>
                <db:insert config-ref="MySQL_Configuration" doc:name="Write token to database">
                    <db:parameterized-query><![CDATA[INSERT INTO `token` (deployment, connectApp, encryptedAccessToken, encryptedRefreshToken, merchantId, locationId, expiryDate, merchantAlias)
VALUES (#[flowVars.deployment], #[flowVars.connectAppId], #[flowVars.encryptedAccessToken], #[flowVars.encryptedRefreshToken], #[flowVars.merchantId], #[flowVars.locationId], #[flowVars.expiresAt], #[flowVars.alias]);]]></db:parameterized-query>
                </db:insert>
                <set-payload value="Token written to database." doc:name="Inform user of successful operation"/>
            </when>
            <otherwise>
                <set-payload value="Failed to validate state parameter. Token creation failed." doc:name="Inform user of failed operation"/>
            </otherwise>
        </choice>
    </flow>
    <sub-flow name="MI:OAuth:retrieveToken">
        <db:select config-ref="MySQL_Configuration" doc:name="Query database for deployment ID">
            <db:parameterized-query><![CDATA[SELECT * FROM token WHERE deployment = #[flowVars.deployment] LIMIT 1;]]></db:parameterized-query>
        </db:select>
        <dw:transform-message metadata:id="4c4f26e2-147b-4d27-848f-efeb8db63fc2" doc:name="Transform Message">
            <dw:input-payload doc:sample="SquareToken.dwl" mimeType="application/java"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	encryptedAccessToken: payload[0].encryptedAccessToken as :string,
	locationId: payload[0].locationId,
	merchantAlias: payload[0].merchantAlias,
	merchantId: payload[0].merchantId
} as :object {
	class : "util.SquarePayload"
}]]></dw:set-payload>
        </dw:transform-message>
    </sub-flow>
    <sub-flow name="MI:OAuth:retrieve-tokens">
        <db:select config-ref="MySQL_Configuration" doc:name="Query database for deployment IDs">
            <db:parameterized-query><![CDATA[SELECT * FROM token WHERE deployment = #[flowVars.deployment];]]></db:parameterized-query>
        </db:select>
    </sub-flow>
    <flow name="MI:OAuth:renew-expiring-tokens">
        <quartz:inbound-endpoint jobName="quartz-mi-renew-tokens-1565311692" cronExpression="0 0 10 ? * MON,THU" repeatInterval="0" responseTimeout="10000" doc:name="Run every Monday &amp; Thursday at 10:00am (PST)" connector-ref="Quartz-OAuth" cronTimeZone="America/Los_Angeles">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-payload value="#[server.dateTime.plusDays(14).withTimeZone(&quot;UTC&quot;).format()]" doc:name="Set payload to date two weeks in the future in ISO8601 format"/>
        <db:select config-ref="MySQL_Configuration" doc:name="Query database for expired tokens">
            <db:parameterized-query><![CDATA[SELECT * FROM token WHERE expiryDate < #[payload];]]></db:parameterized-query>
        </db:select>
        <foreach doc:name="For each expiring token">
            <component doc:name="Renew token">
                <prototype-object class="util.oauth.TokenRenewer"/>
            </component>
            <choice doc:name="Process token">
                <when expression="#[payload == false]">
                    <logger message="Error attempting to renew token: #[flowVars.error]" level="INFO" doc:name="Log error"/>
                </when>
                <otherwise>
                    <db:update config-ref="MySQL_Configuration" doc:name="Update token in database">
                        <db:parameterized-query><![CDATA[UPDATE `token`
SET encryptedAccessToken = #[flowVars.encryptedAccessToken], expiryDate = #[flowVars.expiresAt]
WHERE id = #[flowVars.tokenId];]]></db:parameterized-query>
                    </db:update>
                </otherwise>
            </choice>
        </foreach>
    </flow>
    <flow name="MI:OAuth:trigger-oauth-refresh">
        <http:listener config-ref="${default.http.config}" path="/oauth/refresh/${urlKey}" doc:name="/oauth/refresh"/>
        <flow-ref name="MI:OAuth:renew-expiring-tokens" doc:name="MI:OAuth:renew-expiring-tokens"/>
        <set-payload value="Running OAuth refresh..." doc:name="Set Payload"/>
    </flow>
</mule>
