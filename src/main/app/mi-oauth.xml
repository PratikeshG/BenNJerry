<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:schedulers="http://www.mulesoft.org/schema/mule/schedulers" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/schedulers http://www.mulesoft.org/schema/mule/schedulers/current/mule-schedulers.xsd">
    <quartz:connector name="Quartz-OAuth" validateConnections="true" doc:name="Quartz">
        <quartz:factory-property key="org.quartz.scheduler.instanceName" value="Quartz-OAuth"/>
    </quartz:connector>
    <flow name="MI:OAuth:create-token">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/createToken" doc:name="HTTP"/>
        <choice doc:name="Prompt user to add deployment URI parameter">
            <when expression="#[message.inboundProperties.'http.query.params'.deployment == null]">
                <set-payload value="You must provide a URI parameter, &quot;deployment&quot;, which denotes the deployment name." doc:name="Inform user of missing URI parameter"/>
            </when>
            <when expression="#[message.inboundProperties.'http.query.params'.client_id == null]">
                <set-payload value="You must provide a URI parameter, &quot;client_id&quot;, which denotes the Connect client ID." doc:name="Inform user of missing Connect client ID"/>
            </when>
            <otherwise>
                <component doc:name="Generate state variable">
                    <singleton-object class="util.oauth.StateVariableGenerator">
                        <property key="apiUrl" value="${api.url}"/>
                        <property key="legacyAppId" value="${connect.legacy.id}"/>
                    </singleton-object>
                </component>
                <parse-template location="static/bridge-oauth-redirect-state.html" doc:name="Parse Template"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="MI:OAuth:callback">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/callback" doc:name="HTTP"/>
        <component class="util.oauth.StateVariableParser" doc:name="Verify State Token"/>
        <choice doc:name="Route based on valid state variable">
            <when expression="#[flowVars.deployment != null &amp;&amp; flowVars.code != null]">
                <component doc:name="Convert OAuth code to token">
                    <singleton-object class="util.oauth.CodeToTokenConverter">
                        <property key="apiUrl" value="${api.url}"/>
                        <property key="multiUnitAppId" value="${connect.multiunit.id}"/>
                        <property key="multiUnitAppSecret" value="${connect.multiunit.secret}"/>
                        <property key="legacyAppId" value="${connect.legacy.id}"/>
                        <property key="legacyAppSecret" value="${connect.legacy.secret}"/>
                    </singleton-object>
		        </component>
                <db:insert config-ref="MySQL_Configuration" doc:name="Write token to database">
                    <db:parameterized-query><![CDATA[INSERT INTO `token` (deployment, connectApp, token, merchantId, locationId, legacy, expiryDate)
VALUES (#[flowVars.deployment], #[flowVars.connectAppId], #[payload.accessToken], #[payload.merchantId], #[payload.merchantId], #[flowVars.legacy], #[payload.expiresAt]);]]></db:parameterized-query>
                </db:insert>
                <set-payload value="Token written to database." doc:name="Inform user of successful operation"/>
            </when>
            <otherwise>
                <set-payload value="Failed to validate state parameter. Token creation failed." doc:name="Inform user of failed operation"/>
            </otherwise>
        </choice>
    </flow>
    <sub-flow name="MI:OAuth:retrieveToken">
        <db:select config-ref="MySQL_Configuration" doc:name="Query database for deployment ID">
            <db:parameterized-query><![CDATA[SELECT * FROM token WHERE deployment = #[flowVars.deployment] LIMIT 1;]]></db:parameterized-query>
        </db:select>
        <dw:transform-message metadata:id="4c4f26e2-147b-4d27-848f-efeb8db63fc2" doc:name="Transform Message">
            <dw:input-payload doc:sample="SquareToken.dwl"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	accessToken: payload[0].token as :string,
	legacySingleLocationSquareAccount: true when payload[0].legacySingleLocationSquareAccount == 1 otherwise false,
	locationId: payload[0].locationId,
	merchantAlias: payload[0].merchantAlias,
	merchantId: payload[0].merchantId
} as :object {
	class : "util.SquarePayload"
}]]></dw:set-payload>
        </dw:transform-message>
    </sub-flow>
    <sub-flow name="MI:OAuth:retrieve-tokens">
        <db:select config-ref="MySQL_Configuration" doc:name="Query database for deployment IDs">
            <db:parameterized-query><![CDATA[SELECT * FROM token WHERE deployment = #[flowVars.deployment];]]></db:parameterized-query>
        </db:select>
    </sub-flow>
    <flow name="MI:OAuth:renew-expiring-tokens">
        <quartz:inbound-endpoint jobName="quartz-mi-renew-tokens-192834757" cronExpression="0 0 9 ? * SUN" repeatInterval="0" responseTimeout="10000" doc:name="Run every sunday at 9:00am (UTC)" connector-ref="Quartz-OAuth">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-payload value="#[server.dateTime.plusDays(7).withTimeZone(&quot;UTC&quot;).format()]" doc:name="Set payload to date one week in the future in ISO8601 format"/>
        <db:select config-ref="MySQL_Configuration" doc:name="Query database for expired tokens">
            <db:parameterized-query><![CDATA[SELECT * FROM token WHERE expiryDate < #[payload];]]></db:parameterized-query>
        </db:select>
        <foreach doc:name="For each expiring token">
            <component doc:name="Renew token">
                <singleton-object class="util.oauth.TokenRenewer">
                    <property key="apiUrl" value="${api.url}"/>
                    <property key="multiunitId" value="${connect.multiunit.id}"/>
                    <property key="multiunitSecret" value="${connect.multiunit.secret}"/>
                    <property key="legacyId" value="${connect.legacy.id}"/>
                    <property key="legacySecret" value="${connect.legacy.secret}"/>
                </singleton-object>
            </component>
            <db:update config-ref="MySQL_Configuration" doc:name="Update token in database">
                <db:parameterized-query><![CDATA[UPDATE `token`
SET token = #[payload.accessToken], expiryDate = #[payload.expiresAt]
WHERE id = #[flowVars.tokenId];]]></db:parameterized-query>
            </db:update>
        </foreach>
    </flow>
</mule>
