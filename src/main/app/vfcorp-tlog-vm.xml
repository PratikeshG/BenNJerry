<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd">
    <vm:connector name="VFC_VM_TLOG" validateConnections="true" doc:name="VM"/>
    <queued-asynchronous-processing-strategy name="VFC_TLOG_Async_Processing_Strategy" maxThreads="${vfcorp.tlog.maxThreads}" doc:name="Queued Asynchronous Processing Strategy" minThreads="1" poolExhaustedAction="WAIT" threadWaitTimeout="600000"/>
    <quartz:connector name="Quartz-VFC-tlog" validateConnections="true" doc:name="Quartz">
        <quartz:factory-property key="org.quartz.scheduler.instanceName" value="Quartz-VFC-tlog"/>
    </quartz:connector>
    <sub-flow name="VFC:TNF:generate-tlog-for-location-settings">
        <set-variable variableName="awsFolder" value="#['TNF/' + flowVars.storeId + '/TLOG/' + server.dateTime.format('YYYYMMddhhmmss_')]" doc:name="AWS bucket folder"/>
        <set-variable variableName="enableTlogArchive" value="${vfcorp.tlog.tnf.archive.enabled}" doc:name="enableTlogArchive"/>
        <set-variable variableName="enableCustomerLoyalty" value="${vfcorp.tlog.tnf.loyalty.enabled}" doc:name="enableCustomerLoyalty"/>
        <set-variable variableName="customerGroupNew" value="${vfcorp.tlog.tnf.loyalty.group.new}" doc:name="customerGroupNew"/>
        <set-variable variableName="customerGroupExisting" value="${vfcorp.tlog.tnf.loyalty.group.existing}" doc:name="customerGroupExisting"/>
        <set-variable variableName="customerGroupEmail" value="${vfcorp.tlog.tnf.loyalty.group.email}" doc:name="customerGroupEmail"/>
        <set-variable variableName="storeforceArchiveDirectory" value="${vfcorp.sftp.path.tnf.storeforce}" doc:name="storeforceArchiveDirectory"/>
        <set-variable variableName="encryptionKey" value="${vfcorp.tnf.encryption.key}" doc:name="encryptionKey"/>
    </sub-flow>
    <sub-flow name="VFC:Kipling:generate-tlog-for-location-settings">
        <set-variable variableName="awsFolder" value="#['Kipling/' + flowVars.storeId + '/TLOG/' + server.dateTime.format('YYYYMMddhhmmss_')]" doc:name="AWS bucket folder"/>
        <set-variable variableName="enableTlogArchive" value="${vfcorp.tlog.kipling.archive.enabled}" doc:name="enableTlogArchive"/>
        <set-variable variableName="enableCustomerLoyalty" value="${vfcorp.tlog.kipling.loyalty.enabled}" doc:name="enableCustomerLoyalty"/>
        <set-variable variableName="customerGroupNew" value="${vfcorp.tlog.kipling.loyalty.group.new}" doc:name="customerGroupNew"/>
        <set-variable variableName="customerGroupExisting" value="${vfcorp.tlog.kipling.loyalty.group.existing}" doc:name="customerGroupExisting"/>
        <set-variable variableName="customerGroupEmail" value="${vfcorp.tlog.kipling.loyalty.group.email}" doc:name="customerGroupEmail"/>
        <set-variable variableName="storeforceArchiveDirectory" value="${vfcorp.sftp.path.kipling.storeforce}" doc:name="storeforceArchiveDirectory"/>
        <set-variable variableName="encryptionKey" value="${vfcorp.kipling.encryption.key}" doc:name="encryptionKey"/>
    </sub-flow>
    <sub-flow name="VFC:Nautica:generate-tlog-for-location-settings">
        <set-variable variableName="awsFolder" value="#['Nautica/' + flowVars.storeId + '/TLOG/' + server.dateTime.format('YYYYMMddhhmmss_')]" doc:name="AWS bucket folder"/>
        <set-variable variableName="enableTlogArchive" value="${vfcorp.tlog.nautica.archive.enabled}" doc:name="enableTlogArchive"/>
        <set-variable variableName="enableCustomerLoyalty" value="${vfcorp.tlog.nautica.loyalty.enabled}" doc:name="enableCustomerLoyalty"/>
        <set-variable variableName="customerGroupNew" value="${vfcorp.tlog.nautica.loyalty.group.new}" doc:name="customerGroupNew"/>
        <set-variable variableName="customerGroupExisting" value="${vfcorp.tlog.nautica.loyalty.group.existing}" doc:name="customerGroupExisting"/>
        <set-variable variableName="customerGroupEmail" value="${vfcorp.tlog.nautica.loyalty.group.email}" doc:name="customerGroupEmail"/>
        <set-variable variableName="storeforceArchiveDirectory" value="${vfcorp.sftp.path.nautica.storeforce}" doc:name="storeforceArchiveDirectory"/>
        <set-variable variableName="encryptionKey" value="${vfcorp.nautica.encryption.key}" doc:name="encryptionKey"/>
    </sub-flow>
    <sub-flow name="VFC:generate-tlog-for-location">
        <logger message="Initiating TLOG generation for deployment #[flowVars.deployment]" level="INFO" doc:name="Logger"/>
        <set-session-variable variableName="deploymentId" value="#[flowVars.deployment]" doc:name="deploymentId (VM safe)"/>
        <db:select config-ref="MySQL_Configuration" doc:name="Query preferredCustomerCounters">
            <db:parameterized-query><![CDATA[SELECT * FROM vfcorp_preferred_customer_counter WHERE deployment = #[flowVars.deployment] AND storeId = #[flowVars.storeId];]]></db:parameterized-query>
        </db:select>
        <set-session-variable variableName="preferredCustomerCounters" value="#[message.payload]" doc:name="preferredCustomerCounters"/>
        <flow-ref name="MI:OAuth:retrieveToken" doc:name="MI:OAuth:retrieveToken"/>
        <component doc:name="Generate TLOGs">
            <prototype-object class="vfcorp.TlogGenerator"/>
        </component>
    </sub-flow>
    <flow name="VFC:tlog-generate-for-deployment" processingStrategy="VFC_TLOG_Async_Processing_Strategy">
        <vm:inbound-endpoint exchange-pattern="one-way" path="vfc-tlog-queue" connector-ref="VFC_VM_TLOG" doc:name="vm://vfc-tlog-queue"/>
        <logger level="INFO" doc:name="Logger" message="Initiating TLOG (VM) for deployment #[payload.getDeployment()]"/>
        <set-variable variableName="tlogVfcDeployment" value="#[payload]" doc:name="Set tlogVfcDeployment"/>
        <set-variable variableName="storeId" value="#[payload.getStoreId()]" doc:name="Set storeId"/>
        <set-variable variableName="deployment" value="#[payload.getDeployment()]" doc:name="Set deployment"/>
        <set-variable variableName="timeZone" value="#[payload.getTimeZone()]" doc:name="Set timeZone"/>
        <set-variable variableName="range" value="#[String.valueOf(payload.getTlogRange())]" doc:name="Set range"/>
        <set-variable variableName="offset" value="#[String.valueOf(payload.getTlogOffset())]" doc:name="Set offset"/>
        <choice doc:name="Choice">
            <when expression="#[payload.getDeployment().startsWith(&quot;vfcorp-kipling-&quot;)]">
                <flow-ref name="VFC:Kipling:generate-tlog-for-location-settings" doc:name="VFC:Kipling:generate-tlog-for-location-settings"/>
            </when>
            <when expression="#[payload.getDeployment().startsWith(&quot;vfcorp-nautica-&quot;)]">
                <flow-ref name="VFC:Nautica:generate-tlog-for-location-settings" doc:name="VFC:Nautica:generate-tlog-for-location-settings"/>
            </when>
            <otherwise>
                <flow-ref name="VFC:TNF:generate-tlog-for-location-settings" doc:name="VFC:TNF:generate-tlog-for-location-settings"/>
            </otherwise>
        </choice>
        <flow-ref name="VFC:generate-tlog-for-location" doc:name="VFC:generate-tlog-for-location"/>
        <s3:create-object config-ref="Amazon_S3__Configuration" bucketName="${aws.bucket}" key="#[flowVars.awsFolder + '${vfcorp.tlog.namePrefix}' + flowVars.vfcorpStoreNumber + '${vfcorp.tlog.nameSuffix}']" content-ref="#[flowVars.tlog]" doc:name="Copy to Amazon S3"/>
        <component doc:name="Upload TLOG to archive and SFTP">
            <prototype-object class="vfcorp.TlogUploadToSftpCallable"/>
        </component>
        <choice doc:name="Update PCM">
            <when expression="#[flowVars.preferredCustomerSQLUpdate == true]">
                <logger message="#[flowVars.storeId + &quot;: Updating MySQL for customers transactions&quot;]" level="INFO" doc:name="Logger"/>
                <db:insert config-ref="MySQL_Configuration" doc:name="Update preferredCustomerCounters">
                    <db:dynamic-query><![CDATA[#[flowVars.preferredCustomerSQLStatement]]]></db:dynamic-query>
                </db:insert>
            </when>
            <otherwise>
                <logger message="#[flowVars.storeId + &quot;: No new customers added to transactions. MySQL update not required.&quot;]" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <logger message="#['Finished generating TLOG for VF Corporation, location ' + flowVars.vfcorpStoreNumber + ' (' + flowVars.deployment + ')']" level="INFO" doc:name="Logger"/>
    </flow>
    <sub-flow name="VFC:tlog-generate-for-deploymentGroup">
        <logger message="Initiating TLOG generation for deploymentGroup #[flowVars.deploymentGroup]" level="INFO" doc:name="Logger"/>
        <component doc:name="Get deployments for deploymentGroup">
            <prototype-object class="vfcorp.TlogQueryDatabaseDeploymentGroupCallable"/>
        </component>
        <foreach doc:name="For Each VfcDeployment">
            <vm:outbound-endpoint exchange-pattern="one-way" path="vfc-tlog-queue" connector-ref="VFC_VM_TLOG" doc:name="vm://vfc-tlog-queue"/>
        </foreach>
    </sub-flow>
    <sub-flow name="VFC:tlog-generate-for-single-deployment">
        <logger message="Initiating TLOG generation for deployment #[flowVars.deployment]" level="INFO" doc:name="Logger"/>
        <component doc:name="Get deployment">
            <prototype-object class="vfcorp.TlogQueryDatabaseDeploymentCallable"/>
        </component>
        <vm:outbound-endpoint exchange-pattern="one-way" path="vfc-tlog-queue" connector-ref="VFC_VM_TLOG" doc:name="vm://vfc-tlog-queue"/>
    </sub-flow>
    <flow name="VFC:TNF:tlog-trigger-HAWAII" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-TLOG-tnf-hawaii-1490636322" cronExpression="0 30 9 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 9:30am UTC / 11:30pm HST / 2:30am PST" connector-ref="Quartz-VFC-tlog">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="deploymentGroup" value="tnf-hawaii" doc:name="Set deploymentGroup: tnf-hawaii"/>
        <flow-ref name="VFC:tlog-generate-for-deploymentGroup" doc:name="VFC:tlog-generate-for-deploymentGroup"/>
    </flow>
    <flow name="VFC:TNF:tlog-trigger-WEST" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-TLOG-tnf-west-1490636322" cronExpression="0 30 6 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 6:30am UTC / 11:30pm PST " connector-ref="Quartz-VFC-tlog">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="deploymentGroup" value="tnf-west" doc:name="Set deploymentGroup: tnf-west"/>
        <flow-ref name="VFC:tlog-generate-for-deploymentGroup" doc:name="VFC:tlog-generate-for-deploymentGroup"/>
    </flow>
    <flow name="VFC:TNF:tlog-trigger-CENTRAL" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-TLOG-tnf-central-1490636322" cronExpression="0 30 4 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 4:30am UTC / 11:30pm CST / 9:30pm PST" connector-ref="Quartz-VFC-tlog">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="deploymentGroup" value="tnf-central" doc:name="Set deploymentGroup: tnf-central"/>
        <flow-ref name="VFC:tlog-generate-for-deploymentGroup" doc:name="VFC:tlog-generate-for-deploymentGroup"/>
    </flow>
    <flow name="VFC:TNF:tlog-trigger-EAST" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-TLOG-tnf-east-1490636322" cronExpression="0 30 3 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 3:30am UTC / 11:30pm EST / 8:30pm PST " connector-ref="Quartz-VFC-tlog">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="deploymentGroup" value="tnf-east" doc:name="Set deploymentGroup: tnf-east"/>
        <flow-ref name="VFC:tlog-generate-for-deploymentGroup" doc:name="VFC:tlog-generate-for-deploymentGroup"/>
    </flow>
    <flow name="VFC:Kipling:tlog-trigger-EAST" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-TLOG-kipling-east-1490636322" cronExpression="0 30 3 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 3:30am UTC / 11:30pm EST / 8:30pm PST " connector-ref="Quartz-VFC-tlog">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="deploymentGroup" value="kipling-east" doc:name="Set deploymentGroup: kipling-east"/>
        <flow-ref name="VFC:tlog-generate-for-deploymentGroup" doc:name="VFC:tlog-generate-for-deploymentGroup"/>
    </flow>
    <flow name="VFC:Nautica:tlog-trigger-EAST" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-TLOG-nautica-east-1490636325" cronExpression="0 30 3 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every day at 3:30am UTC / 11:30pm EST / 8:30pm PST " connector-ref="Quartz-VFC-tlog">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="deploymentGroup" value="nautica-east" doc:name="Set deploymentGroup: nautica-east"/>
        <flow-ref name="VFC:tlog-generate-for-deploymentGroup" doc:name="VFC:tlog-generate-for-deploymentGroup"/>
    </flow>
    <flow name="VFC:trigger-generate-tlogs-for-deploymentGroup">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/vfc/tlogs-group/${urlKey}/{deploymentGroup}" doc:name="/tlogs-group"/>
        <set-variable variableName="deploymentGroup" value="#[message.inboundProperties.'http.uri.params'.deploymentGroup]" doc:name="Set deploymentGroup"/>
        <flow-ref name="VFC:tlog-generate-for-deploymentGroup" doc:name="VFC:tlog-generate-for-deploymentGroup"/>
        <set-payload value="TLOG generation triggered for deploymentGroup" doc:name="Set Payload"/>
    </flow>
    <flow name="VFC:trigger-generate-tlogs-for-deployment">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/vfc/tlogs-deployment/${urlKey}/{deployment}" doc:name="/tlogs-deployment"/>
        <set-variable variableName="deployment" value="#[message.inboundProperties.'http.uri.params'.deployment]" doc:name="Set deployment"/>
        <flow-ref name="VFC:tlog-generate-for-single-deployment" doc:name="VFC:tlog-generate-for-single-deployment"/>
        <set-payload value="TLOG generation triggered." doc:name="Set Payload"/>
    </flow>
</mule>
