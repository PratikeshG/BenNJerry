<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:smtps="http://www.mulesoft.org/schema/mule/smtps" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/smtps http://www.mulesoft.org/schema/mule/smtps/current/mule-smtps.xsd">
    <vm:connector name="VFC_VM_Loyalty" validateConnections="true" doc:name="VM"/>
    <queued-asynchronous-processing-strategy name="VFC_Loyalty_Async_Processing_Strategy" maxThreads="${vfcorp.loyalty.maxThreads}" doc:name="Queued Asynchronous Processing Strategy" minThreads="1" poolExhaustedAction="WAIT" threadWaitTimeout="3600000"/>
    <sftp:connector name="SFTP-VFC-reporting" validateConnections="true" doc:name="SFTP"/>
    <quartz:connector name="Quartz-VFC-reporting" validateConnections="true" doc:name="Quartz">
        <quartz:factory-property key="org.quartz.scheduler.instanceName" value="Quartz-VFC-reporting"/>
    </quartz:connector>
    <sub-flow name="VFC:LOYALTY:brand-settings">
        <set-session-variable variableName="deploymentPattern" value="#['vfcorp-' + sessionVars.brand + '-%']" doc:name="deploymentPattern: vfcorp-brand-%"/>
        <choice doc:name="Set brand-specific variables">
            <when expression="#[sessionVars.brand.equals(&quot;kipling&quot;)]">
                <set-session-variable variableName="displayBrand" value="Kipling" doc:name="displayBrand: Kipling"/>
		        <set-session-variable variableName="sftpLoyaltyPath" value="${vfcorp.sftp.path.kipling.loyalty}" doc:name="sftpLoyaltyPath"/>
		        <set-session-variable variableName="sendDailyEmails" value="false" doc:name="sendDailyEmails"/>
		        <set-session-variable variableName="customerGroupEmail" value="${vfcorp.tlog.kipling.loyalty.group.email}" doc:name="customerGroupEmail"/>
		        <set-session-variable variableName="filenameDateStamp" value="#['SQ_CUST_' +server.dateTime.plusDays(-1).format('yyyyMMdd') + '.DAT']" doc:name="filenameDateStamp"/>
		        <set-session-variable variableName="encryptionKey" value="${vfcorp.kipling.encryption.key}" doc:name="encryptionKey"/>
		        <set-session-variable variableName="archiveFolder" value="Kipling/LOYALTY/" doc:name="archiveFolder"/>
		        <set-session-variable variableName="allowCashTransactions" value="${vfcorp.kipling.allowCashTransactions}" doc:name="allowCashTransactions"/>
            </when>
            <when expression="#[sessionVars.brand.equals(&quot;vans&quot;)]">
                <set-session-variable variableName="displayBrand" value="Vans" doc:name="displayBrand: Vans"/>
		        <set-session-variable variableName="sftpLoyaltyPath" value="${vfcorp.sftp.path.vans.loyalty}" doc:name="sftpLoyaltyPath"/>
		        <set-session-variable variableName="sendDailyEmails" value="false" doc:name="sendDailyEmails"/>
		        <set-session-variable variableName="customerGroupEmail" value="${vfcorp.tlog.vans.loyalty.group.email}" doc:name="customerGroupEmail"/>
		        <set-session-variable variableName="filenameDateStamp" value="#['SQ_CUST_' +server.dateTime.plusDays(-1).format('yyyyMMdd') + '.DAT']" doc:name="filenameDateStamp"/>
		        <set-session-variable variableName="encryptionKey" value="${vfcorp.vans.encryption.key}" doc:name="encryptionKey"/>
		        <set-session-variable variableName="archiveFolder" value="VANS/LOYALTY/" doc:name="archiveFolder"/>
		        <set-session-variable variableName="allowCashTransactions" value="${vfcorp.vans.allowCashTransactions}" doc:name="allowCashTransactions"/>
            </when>
            <when expression="#[sessionVars.brand.equals(&quot;test&quot;)]">
                <set-session-variable variableName="displayBrand" value="TEST" doc:name="displayBrand: TEST"/>
		        <set-session-variable variableName="sftpLoyaltyPath" value="${vfcorp.sftp.path.test.loyalty}" doc:name="sftpLoyaltyPath"/>
		        <set-session-variable variableName="sendDailyEmails" value="false" doc:name="sendDailyEmails"/>
		        <set-session-variable variableName="customerGroupEmail" value="${vfcorp.tlog.test.loyalty.group.email}" doc:name="customerGroupEmail"/>
		        <set-session-variable variableName="filenameDateStamp" value="#['SQ_CUST_' +server.dateTime.plusDays(-1).format('yyyyMMdd') + '.DAT']" doc:name="filenameDateStamp"/>
		        <set-session-variable variableName="encryptionKey" value="${vfcorp.test.encryption.key}" doc:name="encryptionKey"/>
		        <set-session-variable variableName="archiveFolder" value="TEST/LOYALTY/" doc:name="archiveFolder"/>
		        <set-session-variable variableName="allowCashTransactions" value="${vfcorp.test.allowCashTransactions}" doc:name="allowCashTransactions"/>
            </when>
            <otherwise>
                <set-session-variable variableName="displayBrand" value="TNF" doc:name="displayBrand: TNF"/>
		        <set-session-variable variableName="sftpLoyaltyPath" value="${vfcorp.sftp.path.tnf.loyalty}" doc:name="sftpLoyaltyPath"/>
		        <set-session-variable variableName="sendDailyEmails" value="true" doc:name="sendDailyEmails"/>
		        <set-session-variable variableName="customerGroupEmail" value="${vfcorp.tlog.tnf.loyalty.group.email}" doc:name="customerGroupEmail"/>
		        <set-session-variable variableName="filenameDateStamp" value="#['SQ_CUST_' +server.dateTime.plusDays(-1).format('yyyyMMdd') + '.DAT']" doc:name="filenameDateStamp"/>
		        <set-session-variable variableName="encryptionKey" value="${vfcorp.tnf.encryption.key}" doc:name="encryptionKey"/>
		        <set-session-variable variableName="archiveFolder" value="TNF/LOYALTY/" doc:name="archiveFolder"/>
		        <set-session-variable variableName="allowCashTransactions" value="${vfcorp.tnf.allowCashTransactions}" doc:name="allowCashTransactions"/>
            </otherwise>
        </choice>
    </sub-flow>
    <sub-flow name="VFC:LOYALTY:generate-loyalty-file">
        <flow-ref name="VFC:LOYALTY:verify-customer-loyalty-ids" doc:name="VFC:LOYALTY:verify-customer-loyalty-ids"/>
        <component doc:name="Aggregate and process all locations">
            <prototype-object class="vfcorp.reporting.LoyaltyAggregationCallable"/>
        </component>
        <sftp:outbound-endpoint exchange-pattern="one-way" connector-ref="SFTP-VFC-reporting" outputPattern="#[sessionVars.filenameDateStamp]" host="${vfcorp.sftp.host}" port="${vfcorp.sftp.port}" path="#[sessionVars.sftpLoyaltyPath]" user="${vfcorp.sftp.username}" password="${vfcorp.sftp.password}" responseTimeout="10000" duplicateHandling="overwrite" doc:name="SFTP"/>
        <choice doc:name="Choice">
            <when expression="#[sessionVars.sendDailyEmails == true]">
                <flow-ref name="VFC:LOYALTY:generate-daily-summary-email" doc:name="VFC:LOYALTY:generate-daily-summary-email"/>
                <flow-ref name="VFC:LOYALTY:generate-daily-category-summary-email" doc:name="VFC:LOYALTY:generate-daily-category-summary-email"/>
            </when>
            <otherwise>
                <logger message="#['Skipping generation of daily emails for ' + sessionVars.displayBrand]" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <set-payload value="#['Done processing ' + sessionVars.filenameDateStamp + ' for ' + sessionVars.displayBrand]" doc:name="Set Payload"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
    </sub-flow>
    <sub-flow name="VFC:LOYALTY:verify-customer-loyalty-ids">
        <flow-ref name="VFC:LOYALTY:brand-settings" doc:name="VFC:LOYALTY:brand-settings"/>
        <logger message="#['Starting VFC:LOYALTY:verify-customer-loyalty-ids for brand ' + sessionVars.displayBrand]" level="INFO" doc:name="Logger"/>
        <flow-ref name="VFC:generate-aggregate-transactions-report" doc:name="VFC:generate-aggregate-transactions-report"/>
        <db:select config-ref="MySQL_Configuration" doc:name="Query preferredCustomerCounters">
            <db:parameterized-query><![CDATA[SELECT * FROM vfcorp_preferred_customer_counter WHERE deployment LIKE #[sessionVars.deploymentPattern];]]></db:parameterized-query>
        </db:select>
        <set-session-variable variableName="preferredCustomerCounters" value="#[message.payload]" doc:name="preferredCustomerCounters"/>
        <component doc:name="Customers PCM Verification">
            <prototype-object class="vfcorp.reporting.CustomerVerificationCallable"/>
        </component>
    </sub-flow>
    <flow name="VFC:generate-aggregate-transactions-report">
        <logger message="Starting VFC:generate-aggregate-transactions-report" level="INFO" doc:name="Logger"/>
        <flow-ref name="GLOBAL:set-session-vars" doc:name="GLOBAL:set-session-vars"/>
        <db:select config-ref="MySQL_Configuration" doc:name="Query database for all with deploymentPattern">
            <db:parameterized-query><![CDATA[SELECT * FROM token WHERE deployment LIKE #[sessionVars.deploymentPattern];]]></db:parameterized-query>
        </db:select>
        <component doc:name="Create deployment payloads">
            <singleton-object class="vfcorp.reporting.DeploymentsCallable"/>
        </component>
        <set-session-variable variableName="squarePayloads" value="#[payload]" doc:name="payloads"/>
        <request-reply doc:name="Request-Reply">
            <vm:outbound-endpoint exchange-pattern="one-way" path="VFC:aggregate-transactions-async-worker" connector-ref="VFC_VM_Loyalty" doc:name="VFC:aggregate-transactions-async-worker">
                <collection-splitter doc:name="Collection Splitter" enableCorrelation="ALWAYS"/>
            </vm:outbound-endpoint>
            <vm:inbound-endpoint exchange-pattern="one-way" path="VFC:aggregate-transactions-reply" connector-ref="VFC_VM_Loyalty" doc:name="VFC:aggregate-transactions-reply">
                <collection-aggregator failOnTimeout="true" doc:name="Collection Aggregator"/>
            </vm:inbound-endpoint>
        </request-reply>
        <logger message="Completed VFC:generate-aggregate-transactions-report" level="INFO" doc:name="Logger"/>
        <set-variable variableName="transactionDetailsByLocation" value="#[payload]" doc:name="Set transactionDetailsByLocation"/>
    </flow>
    <flow name="VFC:generate-aggregate-transactions-report-async-worker" processingStrategy="VFC_Loyalty_Async_Processing_Strategy">
        <vm:inbound-endpoint exchange-pattern="one-way" path="VFC:aggregate-transactions-async-worker" connector-ref="VFC_VM_Loyalty" doc:name="VFC:aggregate-transactions-async-worker"/>
        <logger message="#[&quot;VFC LOYALTY - Obtaining transactions for location: &quot; + payload.getLocationId()]" level="INFO" doc:name="Logger"/>
        <component doc:name="Retrieve Transaction Details By Deployment">
            <prototype-object class="vfcorp.reporting.DetailsByDeploymentCallable"/>
        </component>
    </flow>
    <sub-flow name="VFC:LOYALTY:generate-daily-summary-email">
        <component doc:name="Daily Summary Logic">
            <prototype-object class="vfcorp.reporting.DailySummaryCallable"/>
        </component>
        <smtp:outbound-endpoint host="${email.info.sending.server}"  user="${email.info.sending.username}" password="${email.info.sending.password}" connector-ref="SES_SMTP_STARTTLS_HTML"  from="${email.info.sending.from.reports}" subject="#['Square Daily ' + sessionVars.displayBrand + ' Summary - ' + server.dateTime.plusDays(-1).format('EEE, d MMM yyyy')]" responseTimeout="10000" doc:name="Email Summary" mimeType="text/html" to="#[sessionVars.emailRecipients]"/>
    </sub-flow>
    <sub-flow name="VFC:LOYALTY:generate-daily-category-summary-email">
        <component doc:name="Daily Category Summary Logic">
            <prototype-object class="vfcorp.reporting.DailyCategoriesSummaryCallable"/>
        </component>
        <smtp:outbound-endpoint host="${email.info.sending.server}"  user="${email.info.sending.username}" password="${email.info.sending.password}" connector-ref="SES_SMTP_STARTTLS" from="${email.info.sending.from.reports}" subject="#['Square Daily ' + sessionVars.displayBrand + ' Categories Summary - ' + server.dateTime.plusDays(-1).format('EEE, d MMM yyyy')]"  responseTimeout="10000" mimeType="text/html" doc:name="Email Category Summary" to="#[sessionVars.emailRecipients]"/>
    </sub-flow>
    <flow name="VFC:LOYALTY:trigger-generate-loyalty-file">
        <http:listener config-ref="${default.http.config}" path="/vfc/loyalty/${urlKey}" doc:name="/vfc/loyalty/urlKey"/>
        <set-session-variable variableName="brand" value="#[message.inboundProperties.'http.query.params'.brand]" doc:name="brand"/>
        <set-session-variable variableName="range" value="#[message.inboundProperties.'http.query.params'.range]" doc:name="range"/>
        <set-session-variable variableName="offset" value="#[message.inboundProperties.'http.query.params'.offset]" doc:name="offset"/>
        <set-session-variable variableName="emailRecipients" value="#[message.inboundProperties.'http.query.params'.email]" doc:name="emailRecipients"/>
        <flow-ref name="VFC:LOYALTY:generate-loyalty-file" doc:name="VFC:LOYALTY:generate-loyalty-file"/>
    </flow>
    <flow name="VFC:TNF:generate-loyalty-file-cron" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-tnf-generate-loyalty-1522533799" cronExpression="0 20 0 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Cron every day at 12:20am (PST)" connector-ref="Quartz-VFC-reporting" cronTimeZone="America/Los_Angeles">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-session-variable variableName="brand" value="tnf" doc:name="brand: tnf"/>
        <set-session-variable variableName="offset" value="1" doc:name="offset: 1"/>
        <set-session-variable variableName="range" value="1" doc:name="range: 1"/>
        <set-session-variable variableName="emailRecipients" value="${vfcorp.tnf.summary.email}" doc:name="emailRecipients: defaults"/>
        <logger message="#['Running ' + sessionVars.brand + ' loyalty cron...']" level="INFO" doc:name="debug Logger"/>
        <choice doc:name="Loyalty Enabled?">
            <when expression="#['${vfcorp.tlog.tnf.loyalty.enabled}' == false]">
                <logger message="#[sessionVars.brand + ' loyalty disabled. Not generating loyalty file.']" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <flow-ref name="VFC:LOYALTY:generate-loyalty-file" doc:name="VFC:LOYALTY:generate-loyalty-file"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="VFC:VANS:generate-loyalty-file-cron" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-vans-generate-loyalty-152259999900" cronExpression="0 30 0 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Cron every day at 12:30am (PST)" connector-ref="Quartz-VFC-reporting" cronTimeZone="America/Los_Angeles">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-session-variable variableName="brand" value="vans" doc:name="brand: vans"/>
        <set-session-variable variableName="offset" value="1" doc:name="offset: 1"/>
        <set-session-variable variableName="range" value="1" doc:name="range: 1"/>
        <set-session-variable variableName="emailRecipients" value="${vfcorp.vans.summary.email}" doc:name="emailRecipients: defaults"/>
        <logger message="#['Running ' + sessionVars.brand + ' loyalty cron...']" level="INFO" doc:name="debug Logger"/>
        <choice doc:name="Loyalty Enabled?">
            <when expression="#['${vfcorp.tlog.vans.loyalty.enabled}' == false]">
                <logger message="#[sessionVars.brand + ' loyalty disabled. Not generating loyalty file.']" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <flow-ref name="VFC:LOYALTY:generate-loyalty-file" doc:name="VFC:LOYALTY:generate-loyalty-file"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="VFC:Kipling:generate-loyalty-file-cron" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-kipling-generate-loyalty-152259999999" cronExpression="0 25 0 * * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Cron every day at 12:25am (PST)" connector-ref="Quartz-VFC-reporting" cronTimeZone="America/Los_Angeles">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-session-variable variableName="brand" value="kipling" doc:name="brand: kipling"/>
        <set-session-variable variableName="offset" value="1" doc:name="offset: 1"/>
        <set-session-variable variableName="range" value="1" doc:name="range: 1"/>
        <set-session-variable variableName="emailRecipients" value="${vfcorp.kipling.summary.email}" doc:name="emailRecipients: defaults"/>
        <logger message="#['Running ' + sessionVars.brand + ' loyalty cron...']" level="INFO" doc:name="debug Logger"/>
        <choice doc:name="Loyalty Enabled?">
            <when expression="#['${vfcorp.tlog.kipling.loyalty.enabled}' == false]">
                <logger message="#[sessionVars.brand + ' loyalty disabled. Not generating loyalty file.']" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <flow-ref name="VFC:LOYALTY:generate-loyalty-file" doc:name="VFC:LOYALTY:generate-loyalty-file"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="VFC:LOYALTY:trigger-customer-ids">
        <http:listener config-ref="${default.http.config}" path="/vfc/customers/${urlKey}" doc:name="/vfc/customers/urlKey"/>
        <set-session-variable variableName="brand" value="#[message.inboundProperties.'http.query.params'.brand]" doc:name="brand"/>
        <set-session-variable variableName="range" value="#[message.inboundProperties.'http.query.params'.range]" doc:name="range"/>
        <set-session-variable variableName="offset" value="#[message.inboundProperties.'http.query.params'.offset]" doc:name="offset"/>
        <logger message="#['Starting VFC:LOYALTY:trigger-customer-ids for brand ' + sessionVars.brand]" level="INFO" doc:name="Logger"/>
        <flow-ref name="VFC:LOYALTY:verify-customer-loyalty-ids" doc:name="VFC:LOYALTY:verify-customer-loyalty-ids"/>
        <set-payload value="Done" doc:name="Set Payload"/>
    </flow>
</mule>
