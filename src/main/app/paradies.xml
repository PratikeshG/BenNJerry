<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
    <vm:connector name="Paradies_VM_Catalog" validateConnections="true" createMultipleTransactedReceivers="true" numberOfConcurrentTransactedReceivers="5" doc:name="VM"></vm:connector>
    <vm:connector name="Paradies_VM_Worker" validateConnections="true" doc:name="VM"> 
        <vm:queue-profile maxOutstandingMessages="1"></vm:queue-profile>  
    </vm:connector>
    <!-- <ftp:connector name="Paradies_FTP_catalog" pollingFrequency="5000" validateConnections="true" moveToDirectory="/Outbound/Complete/" moveToPattern="#[sessionVars['originalFilename']]" outputPattern="#[sessionVars['originalFilename']]" doc:name="FTP"></ftp:connector> -->
    <queued-asynchronous-processing-strategy name="Paradies_Catalog_Asynch_Processing_Strategy" maxThreads="1" minThreads="1" doc:name="Queued Asynchronous Processing Strategy"></queued-asynchronous-processing-strategy>
    <file:connector name="File" readFromDirectory="/Users/bhartard/Desktop/FTP_TEST/Paradies/Outbound" autoDelete="true" streaming="true" validateConnections="true" doc:name="File"/>
    <sub-flow name="Paradies:set-flow-vars"> 
        <set-session-variable variableName="merchantId" value="#[payload.merchantId]" doc:name="Set merchantId"></set-session-variable>  
        <set-session-variable variableName="token" value="#[payload.accessToken]" doc:name="Set token"></set-session-variable>  
    </sub-flow>
    <flow name="Pandora:update-item-master" processingStrategy="synchronous"> 
        <file:inbound-endpoint responseTimeout="10000" doc:name="File" moveToDirectory="/Users/bhartard/Desktop/FTP_TEST/Paradies/Outbound/Complete" path="/Users/bhartard/Desktop/FTP_TEST/Paradies/Outbound" connector-ref="File">
            <file:filename-regex-filter pattern="master_1.txt" caseSensitive="true"/>
        </file:inbound-endpoint>
        <file:file-to-byte-array-transformer doc:name="File to Byte Array"/>  
        <set-session-variable variableName="ftpPayload" value="#[payload]" doc:name="Set ftpPayload"></set-session-variable>  
        <set-session-variable variableName="originalFilename" value="#[message.inboundProperties.originalFilename]" doc:name="Set originalFilename"></set-session-variable>  
        <flow-ref name="GLOBAL:set-session-vars" doc:name="GLOBAL:set-session-vars"></flow-ref>  
        <set-variable variableName="deployment" value="${paradies.pandora.deploymentId}" doc:name="Set Pandora deployment ID" metadata:id="a624d281-c842-4d7c-b77b-e0197dc69705"></set-variable>  
        <flow-ref name="MI:OAuth:retrieveToken" metadata:id="32bd9c86-9edc-4dca-a02d-10d1284a9732" doc:name="MI:OAuth:retrieveToken"></flow-ref>  
        <flow-ref name="Paradies:set-flow-vars" doc:name="Paradies:set-flow-vars"></flow-ref>  
        <flow-ref name="MI:getLocations" doc:name="MI:getLocations" metadata:id="023b028f-25a2-48ff-aa6c-c181ef7f3259"></flow-ref>  
        <request-reply doc:name="Request-Reply"> 
            <vm:outbound-endpoint exchange-pattern="one-way" path="pandoraLocationCatalogRequestQueue" doc:name="Catalog Update Request Queue" connector-ref="Paradies_VM_Catalog"></vm:outbound-endpoint>  
            <vm:inbound-endpoint exchange-pattern="one-way" path="pandoraLocationCatalogResponseQueue" doc:name="Catalog Update Response Queue" connector-ref="Paradies_VM_Catalog"></vm:inbound-endpoint>  
        </request-reply>  
        <logger message="DONE!!!!!!!!" level="INFO" doc:name="Finish"></logger>  
        <!-- 
            <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="${email.info.sending.email}" password="${email.info.sending.password}" connector-ref="Gmail" to="${email.info.receiving.email}" from="Square Mule" subject="#['${mule.env}'.toUpperCase() + ' - Test Pandora Items Flow']" responseTimeout="10000" doc:name="Email to Sales Eng"/>
        	-->  
    </flow>
    <flow name="Pandora:location-update-catalog-queue-splitter" processingStrategy="Paradies_Catalog_Asynch_Processing_Strategy"> 
        <vm:inbound-endpoint exchange-pattern="one-way" path="pandoraLocationCatalogRequestQueue" connector-ref="Paradies_VM_Catalog" doc:name="VM"></vm:inbound-endpoint>  
        <collection-splitter metadata:id="1055750a-fb72-47fc-86e1-d1d24ea958b5" doc:name="Process catalog update separately for each location"></collection-splitter>
  
        <vm:outbound-endpoint exchange-pattern="one-way" path="paradiesAsyncWorkerQueue" connector-ref="Paradies_VM_Worker" doc:name="paradiesAsyncWorkerQueue"></vm:outbound-endpoint>  
    </flow>
    <flow name="Pandora:async-process-location-update-catalog" processingStrategy="Paradies_Catalog_Asynch_Processing_Strategy"> 
        <vm:inbound-endpoint exchange-pattern="one-way" path="paradiesAsyncWorkerQueue" connector-ref="Paradies_VM_Worker" doc:name="paradiesAsyncWorkerQueue"></vm:inbound-endpoint>
        <logger message="Started processing location: #[payload.locationDetails.nickname] (#[payload.id])" level="INFO" metadata:id="dcd5315c-f6eb-4a7e-9ffd-4d37d9f9ad91" doc:name="Location X catelog update started"></logger>  
        <flow-ref name="Pandora:location-update-catelog" metadata:id="5ec9e8d1-661a-4b9d-980b-c156b65e5b27" doc:name="Pandora:location-update-catelog"></flow-ref>  
        <vm:outbound-endpoint exchange-pattern="one-way" path="pandoraLocationCatalogAggregationQueue" connector-ref="Paradies_VM_Catalog" doc:name="paradiesLocationCatalogAggregationQueue"></vm:outbound-endpoint>  
    </flow>
    <sub-flow name="Pandora:location-update-catelog"> 
        <flow-ref name="Paradies:set-catalog-flow-vars" doc:name="Paradies:set-catalog-flow-vars"></flow-ref>  
        <flow-ref name="MI:getCatalogForLocation" metadata:id="5ec9e8d1-661a-4b9d-980b-c156b65e5b27" doc:name="MI:getCatalogForLocation"></flow-ref>  
        <component class="paradies.pandora.CatalogProcessor" metadata:id="d5bec1d6-5c9e-4438-b746-6b836e336204" doc:name="Diff and Process Item Master"></component>  
    </sub-flow>
    <flow name="Pandora:location-catalog-update-queue-aggregation"> 
        <vm:inbound-endpoint exchange-pattern="one-way" path="pandoraLocationCatalogAggregationQueue" doc:name="paradiesLocationCatalogAggregationQueue" connector-ref="Paradies_VM_Catalog"></vm:inbound-endpoint>  
        <logger message="Done processing location: #[payload.location.id]" level="INFO" metadata:id="d0249f43-340d-4625-b1c1-da8fa3ba6d8e" doc:name="Location catelog update completed"></logger>  
        <collection-aggregator timeout="3600000" failOnTimeout="true" storePrefix="pandora_location_catalog_updates" doc:name="Collection Aggregator" doc:description="3,600,000 = 1 hour timeout"></collection-aggregator>  
        <vm:outbound-endpoint exchange-pattern="one-way" path="pandoraLocationCatalogResponseQueue" doc:name="Submit to Catalog Update Response Queue" connector-ref="Paradies_VM_Catalog"></vm:outbound-endpoint>  
    </flow>
    <flow name="Pandora:generate-TLOGs" processingStrategy="synchronous"> 
        <quartz:inbound-endpoint jobName="quartz-pandora-generate-tlog" cronExpression="0 0 5 1/1 * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Cron every day at 1:00am (EST)"> 
            <quartz:event-generator-job></quartz:event-generator-job>  
        </quartz:inbound-endpoint>  
        <flow-ref name="GLOBAL:set-session-vars" doc:name="GLOBAL:set-session-vars"></flow-ref>  
        <set-variable variableName="deployment" value="${paradies.pandora.deploymentId}" metadata:id="a624d281-c842-4d7c-b77b-e0197dc69705" doc:name="Set Pandora deployment ID"></set-variable>  
        <flow-ref name="MI:OAuth:retrieveToken" metadata:id="32bd9c86-9edc-4dca-a02d-10d1284a9732" doc:name="MI:OAuth:retrieveToken"></flow-ref>  
        <flow-ref name="Paradies:set-flow-vars" doc:name="Paradies:set-flow-vars"></flow-ref>  
        <flow-ref name="Paradies:set-report-payload-flow-vars" doc:name="Paradies:set-report-payload-flow-vars"></flow-ref>  
        <flow-ref name="MI:getLocations" metadata:id="023b028f-25a2-48ff-aa6c-c181ef7f3259" doc:name="MI:getLocations"></flow-ref>  
        <foreach counterVariableName="paradies-location-counter" doc:name="For Each Location">
            <scripting:component doc:name="Run TLOGGenerator">
                <scripting:script engine="Groovy"><![CDATA[import paradies.TLOGGenerator;
import paradies.TLOGGeneratorPayload;

import com.squareup.connect.SquareClient;
import com.squareup.connect.diff.Catalog;

import util.TimeManager;

SquareClient client = new SquareClient(sessionVars['token'], sessionVars['apiUrl'], sessionVars['apiVersion'], sessionVars['merchantId'], payload.id);

TLOGGeneratorPayload reportPayload = new TLOGGeneratorPayload();

// Settings
reportPayload.setDefaultDeviceId("20");
reportPayload.setTimeZone("America/New_York");

// Location
reportPayload.setLocation(payload);

// Employees
reportPayload.setEmployees(client.employees().list());

// Payments
Map<String,String> paymentParams;
String timeMethod = flowVars['timeMethod'];
String timeZone = flowVars['timeZone'];
int offset = Integer.parseInt(flowVars['offset']);

if ("getPastDayInterval".equals(timeMethod)) {
	int range = Integer.parseInt(flowVars['range']);
	paymentParams = TimeManager.getPastDayInterval(range, offset, timeZone);
} else if ("getPastTimeInterval".equals(timeMethod)) {
	int seconds = Integer.parseInt(flowVars['seconds']);
	paymentParams = TimeManager.getPastTimeInterval(seconds, offset, timeZone);
}
reportPayload.setPayments(client.payments().list(paymentParams));

// Catalog
Catalog catalog = Catalog.getCatalog(client, flowVars['itemPrimaryKey'], flowVars['otherPrimaryKey']);
reportPayload.setCatalog(catalog);

TLOGGenerator tlogGenerator = new TLOGGenerator(reportPayload);]]></scripting:script>
            </scripting:component>
  
            <logger message="Location payload: #[payload.getTlogs()]" level="INFO" doc:name="log results" metadata:id="ac32c127-a665-4898-8752-9a0deebe8897"></logger>
        </foreach>  
        <set-payload value="Done!" doc:name="Set Payload"></set-payload>  
        <logger message="TLOG: #[payload]" level="INFO" doc:name="Finish"></logger>  
    </flow>
    <flow name="Pandora:trigger-generate-TLOGs"> 
        <http:listener config-ref="HTTP_Listener_Configuration" path="/pandora-tlogs" doc:name="/pandora-tlogs"></http:listener>  
        <flow-ref name="Pandora:generate-TLOGs" doc:name="Pandora:generate-TLOGs"></flow-ref>  
    </flow>
    <sub-flow name="Paradies:set-reporting-flow-vars"> 
        <set-variable variableName="timeMethod" value="${paradies.TLOG.params.timeMethod}" doc:name="Set time method"></set-variable>  
        <set-variable variableName="timeZone" value="${paradies.TLOG.params.timeZone}" doc:name="Set time zone"></set-variable>  
        <set-variable variableName="offset" value="${paradies.TLOG.params.offset}" doc:name="Set offset"></set-variable>  
        <set-variable variableName="range" value="${paradies.TLOG.params.range}" doc:name="Set date range to one day"></set-variable>  
    </sub-flow>
    <sub-flow name="Paradies:set-report-payload-flow-vars"> 
        <flow-ref name="Paradies:set-catalog-flow-vars" doc:name="Paradies:set-catalog-flow-vars"></flow-ref>  
        <flow-ref name="Paradies:set-reporting-flow-vars" doc:name="Paradies:set-reporting-flow-vars"></flow-ref>  
    </sub-flow>
    <sub-flow name="Paradies:set-catalog-flow-vars"> 
        <scripting:transformer metadata:id="d2007bc2-a85e-4237-964d-7591b551fe26" doc:name="Set catalog flow vars"> 
            <scripting:script engine="Groovy"><![CDATA[import com.squareup.connect.diff.CatalogChangeRequest;

message.setInvocationProperty('itemPrimaryKey', CatalogChangeRequest.PrimaryKey.ID);
message.setInvocationProperty('otherPrimaryKey', CatalogChangeRequest.PrimaryKey.ID);

return payload;]]></scripting:script>  
        </scripting:transformer>  
    </sub-flow>
</mule>
