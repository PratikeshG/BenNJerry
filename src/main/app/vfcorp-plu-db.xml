<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:smtps="http://www.mulesoft.org/schema/mule/smtps" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/smtps http://www.mulesoft.org/schema/mule/smtps/current/mule-smtps.xsd">
    <vm:connector name="VFC_VM_PLU" validateConnections="true" doc:name="VM"/>
    <queued-asynchronous-processing-strategy name="VFC_PLU_SyncToDatabase_Async_Strategy" maxThreads="${vfcorp.plu.syncToDatabase.maxThreads}" minThreads="1" doc:name="Queued Asynchronous Processing Strategy" poolExhaustedAction="WAIT" threadWaitTimeout="43200000"/>
    <quartz:connector name="Quartz-VFC-plu" validateConnections="true" doc:name="Quartz">
        <quartz:factory-property key="org.quartz.scheduler.instanceName" value="Quartz-VFC-plu"/>
    </quartz:connector>
    <quartz:connector name="Quartz-VFO-plu" validateConnections="true" doc:name="Quartz"/>
    <quartz:connector name="Quartz-VFC-plu-whitelist" validateConnections="true" doc:name="Quartz"/>
    <flow name="VFC:plu-sftp-cron" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-plu-sftp-1490636399" cronExpression="0 0/15 * 1/1 * ? *" repeatInterval="0" responseTimeout="10000" doc:name="Run every 15 minutes" connector-ref="Quartz-VFC-plu">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <component doc:name="Check deployment SFTP folders for PLU files">
		    <prototype-object class="vfcorp.PluPollSyncToDatabaseCallable"/>
		</component>
        <choice doc:name="Only process non-empty lists">
            <when expression="#[payload == null || payload.size() &lt; 1]">
                <logger message="VFC SFTP Poll: No files to process" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <foreach doc:name="For Each PluSyncDatabaseRequest">
                    <vm:outbound-endpoint exchange-pattern="one-way" path="vfc-plu-sync-to-db" connector-ref="VFC_VM_PLU" doc:name="vm://vfc-plu-sync-to-db"/>
                </foreach>
            </otherwise>
        </choice>
    </flow>
    <flow name="VFC:trigger-plu-sftp-cron">
        <http:listener config-ref="${default.http.config}" path="/vfc/plu/sync/${urlKey}" doc:name="/plu/sync"/>
        <flow-ref name="VFC:plu-sftp-cron" doc:name="VFC:plu-sftp-cron"/>
        <set-payload value="Ran PLU SFTP Cron" doc:name="Set Payload"/>
    </flow>
    <flow name="VFC:plu-sync-to-database" processingStrategy="VFC_PLU_SyncToDatabase_Async_Strategy">
        <vm:inbound-endpoint exchange-pattern="one-way" path="vfc-plu-sync-to-db" connector-ref="VFC_VM_PLU" name="vfcPLUSyncVM" doc:name="vfcPLUSyncVM"/>
        <logger message="Initiating PLU (#[payload.getOriginalFileName()]) ingestion for deployment #[payload.getDeployment().getDeployment()] -- with database updates" level="INFO" doc:name="Logger"/>
        <choice doc:name="Kipling, Nautica, TNF">
            <when expression="#[payload.getDeployment().getDeployment().startsWith(&quot;vfcorp-kipling-&quot;)]">
                <set-variable variableName="brand" value="Kipling" doc:name="brand: Kipling"/>
                <set-variable variableName="encryptionKey" value="${vfcorp.kipling.encryption.key}" doc:name="Set encryptionKey"/>
            </when>
            <when expression="#[payload.getDeployment().getDeployment().startsWith(&quot;vfcorp-nautica-&quot;)]">
                <set-variable variableName="brand" value="Nautica" doc:name="brand: Nautica"/>
                <set-variable variableName="encryptionKey" value="${vfcorp.nautica.encryption.key}" doc:name="Set encryptionKey"/>
            </when>
            <when expression="#[payload.getDeployment().getDeployment().startsWith(&quot;vfcorp-vans-&quot;)]">
                <set-variable variableName="brand" value="Vans" doc:name="brand: Vans"/>
                <set-variable variableName="encryptionKey" value="${vfcorp.vans.encryption.key}" doc:name="Set encryptionKey"/>
            </when>
            <when expression="#[payload.getDeployment().getDeployment().startsWith(&quot;vfcorp-test-&quot;)]">
                <set-variable variableName="brand" value="Test" doc:name="brand: Test"/>
                <set-variable variableName="encryptionKey" value="${vfcorp.test.encryption.key}" doc:name="Set encryptionKey"/>
            </when>
            <when expression="#[payload.getDeployment().getDeployment().startsWith(&quot;vfcorp-vfo-&quot;)]">
                <set-variable variableName="brand" value="VFO" doc:name="brand: VFO"/>
                <set-variable variableName="encryptionKey" value="${vfcorp.vfo.encryption.key}" doc:name="Set encryptionKey"/>
            </when>
            <otherwise>
                <set-variable variableName="brand" value="TNF" doc:name="brand: TNF"/>
                <set-variable variableName="encryptionKey" value="${vfcorp.tnf.encryption.key}" doc:name="Set encryptionKey"/>
            </otherwise>
        </choice>
        <set-variable variableName="archiveFolder" value="#[flowVars.brand + '/' + payload.getDeployment().getStoreId() + '/PLU']" doc:name="Archive bucket/folder"/>
        <component doc:name="Sync PLU To Database">
            <prototype-object class="vfcorp.PluSyncToDatabaseCallable"/>
        </component>
    </flow>
    <sub-flow name="VFC:plu-database-to-square-for-brand">
        <logger message="Initiating PLU Database to Square update for VFC brand: #[sessionVars.brand]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Set brand-specific variables">
            <when expression="#[sessionVars.brand.equals(&quot;nautica&quot;)]">
                <set-variable variableName="itemNumberLookupLength" value="${vfcorp.nautica.itemNumberLookupLength}" doc:name="Nautica itemNumberLookupLength"/>
                <set-variable variableName="ignoresSkuCheckDigit" value="${vfcorp.nautica.ignoresSkuCheckDigit}" doc:name="Nautica ignoresSkuCheckDigit"/>
            </when>
            <when expression="#[sessionVars.brand.equals(&quot;kipling&quot;)]">
                <set-variable variableName="itemNumberLookupLength" value="${vfcorp.kipling.itemNumberLookupLength}" doc:name="Kipling itemNumberLookupLength"/>
                <set-variable variableName="ignoresSkuCheckDigit" value="${vfcorp.kipling.ignoresSkuCheckDigit}" doc:name="Kipling ignoresSkuCheckDigit"/>
            </when>
            <when expression="#[sessionVars.brand.equals(&quot;vfo&quot;)]">
                <set-variable variableName="itemNumberLookupLength" value="${vfcorp.vfo.itemNumberLookupLength}" doc:name="VFO itemNumberLookupLength"/>
                <set-variable variableName="ignoresSkuCheckDigit" value="${vfcorp.vfo.ignoresSkuCheckDigit}" doc:name="VFO ignoresSkuCheckDigit"/>
            </when>
            <when expression="#[sessionVars.brand.equals(&quot;tnfca&quot;)]">
                <set-variable variableName="itemNumberLookupLength" value="${vfcorp.tnfca.itemNumberLookupLength}" doc:name="TNFCA itemNumberLookupLength"/>
                <set-variable variableName="ignoresSkuCheckDigit" value="${vfcorp.tnfca.ignoresSkuCheckDigit}" doc:name="TNFCA ignoresSkuCheckDigit"/>
            </when>
            <when expression="#[sessionVars.brand.equals(&quot;vans&quot;)]">
                <set-variable variableName="itemNumberLookupLength" value="${vfcorp.vans.itemNumberLookupLength}" doc:name="Vans itemNumberLookupLength"/>
                <set-variable variableName="ignoresSkuCheckDigit" value="${vfcorp.vans.ignoresSkuCheckDigit}" doc:name="Vans ignoresSkuCheckDigit"/>
            </when>
            <when expression="#[sessionVars.brand.equals(&quot;test&quot;)]">
                <set-variable variableName="itemNumberLookupLength" value="${vfcorp.test.itemNumberLookupLength}" doc:name="Test itemNumberLookupLength"/>
                <set-variable variableName="ignoresSkuCheckDigit" value="${vfcorp.test.ignoresSkuCheckDigit}" doc:name="Test ignoresSkuCheckDigit"/>
            </when>
            <otherwise>
                <set-variable variableName="itemNumberLookupLength" value="${vfcorp.tnf.itemNumberLookupLength}" doc:name="TNF itemNumberLookupLength"/>
                <set-variable variableName="ignoresSkuCheckDigit" value="${vfcorp.tnf.ignoresSkuCheckDigit}" doc:name="TNF ignoresSkuCheckDigit"/>
            </otherwise>
        </choice>
        <component doc:name="Database to Square Catalog Update">
            <prototype-object class="vfcorp.PluDatabaseToSquareCallable"/>
        </component>
        <set-payload value="Completed Database to Square updates for VFC brand: #[sessionVars.brand]" doc:name="Set Payload"/>
        <smtp:outbound-endpoint host="${email.info.sending.server}"  user="${email.info.sending.username}" password="${email.info.sending.password}" connector-ref="SES_SMTP_STARTTLS" to="bhartard@squareup.com" from="${email.info.sending.from.bridge}" subject="#['${mule.env}'.toUpperCase() + ' - COMPLETED Catalog updates - ' + sessionVars.brand]" responseTimeout="10000" doc:name="Email to Sales Eng"/>
    </sub-flow>
    <flow name="VFC:trigger-plu-database-to-square-for-brand">
        <http:listener config-ref="${default.http.config}" path="/vfc/plu/square/${urlKey}/{brand}" doc:name="/vfc/plu/square/KEY/BRAND"/>
        <set-session-variable variableName="brand" value="#[message.inboundProperties.'http.uri.params'.brand]" doc:name="Set brand"/>
        <logger message="HTTP Trigger: PLU Database to Square: #[sessionVars.brand]" level="INFO" doc:name="Logger"/>
        <async doc:name="Async">
            <flow-ref name="VFC:plu-database-to-square-for-brand" doc:name="VFC:plu-database-to-square-for-brand"/>
        </async>
        <set-payload value="Running PLU Database to Square for VFC brand: #[sessionVars.brand]" doc:name="Set Payload"/>
    </flow>
    <flow name="VFC:TNF:plu-trigger-database-to-square" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-tnf-PLU-daily-1531330120" cronExpression="0 0 4 * * ? *" repeatInterval="0" connector-ref="Quartz-VFC-plu" responseTimeout="10000" doc:name="Run every day at 4:00am EST" cronTimeZone="America/New_York">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <logger message="CRON: PLU Database to Square for TNF" level="INFO" doc:name="Logger"/>
        <set-session-variable variableName="brand" value="tnf" doc:name="Set brand: tnf"/>
        <flow-ref name="VFC:plu-database-to-square-for-brand" doc:name="VFC:plu-database-to-square-for-brand"/>
    </flow>
    <flow name="VFC:TNF-CA:plu-trigger-database-to-square" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-tnfca-PLU-daily-1571074282" cronExpression="0 0 4 * * ? *" cronTimeZone="America/New_York" repeatInterval="0" connector-ref="Quartz-VFC-plu" responseTimeout="10000" doc:name="Run every day at 4:00am EST">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <logger message="CRON: PLU Database to Square for TNF Canada" level="INFO" doc:name="Logger"/>
        <set-session-variable variableName="brand" value="tnfca" doc:name="Set brand: tnfca"/>
        <flow-ref name="VFC:plu-database-to-square-for-brand" doc:name="VFC:plu-database-to-square-for-brand"/>
    </flow>
    <flow name="VFC:Vans:plu-trigger-database-to-square" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-vans-PLU-daily-1571074999" cronExpression="0 30 3 * * ? *" cronTimeZone="America/New_York" repeatInterval="0" connector-ref="Quartz-VFC-plu" responseTimeout="10000" doc:name="Run every day at 3:30am EST">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <logger message="CRON: PLU Database to Square for Vans" level="INFO" doc:name="Logger"/>
        <set-session-variable variableName="brand" value="vans" doc:name="Set brand: vans"/>
        <flow-ref name="VFC:plu-database-to-square-for-brand" doc:name="VFC:plu-database-to-square-for-brand"/>
    </flow>
    <flow name="VFC:Test:plu-trigger-database-to-square" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-test-PLU-daily-1571074888" cronExpression="0 30 3 * * ? *" cronTimeZone="America/New_York" repeatInterval="0" connector-ref="Quartz-VFC-plu" responseTimeout="10000" doc:name="Run every day at 3:30am EST">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <logger message="CRON: PLU Database to Square for Test (Vans)" level="INFO" doc:name="Logger"/>
        <set-session-variable variableName="brand" value="test" doc:name="Set brand: test"/>
        <flow-ref name="VFC:plu-database-to-square-for-brand" doc:name="VFC:plu-database-to-square-for-brand"/>
    </flow>
    <flow name="VFC:Kipling:plu-trigger-database-to-square" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-kipling-PLU-daily-1509908120" cronExpression="0 0 4 * * ? *" repeatInterval="0" connector-ref="Quartz-VFC-plu" responseTimeout="10000" doc:name="Run every day at 4:00am EST" cronTimeZone="America/New_York">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <logger message="CRON: PLU Database to Square for Kipling" level="INFO" doc:name="Logger"/>
        <set-session-variable variableName="brand" value="kipling" doc:name="Set brand: kipling"/>
        <flow-ref name="VFC:plu-database-to-square-for-brand" doc:name="VFC:plu-database-to-square-for-brand"/>
    </flow>
    <flow name="VFC:Nautica:plu-trigger-database-to-square" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-nautica-PLU-daily-1509908122" cronExpression="0 0 4 * * ? *" cronTimeZone="America/New_York" repeatInterval="0" connector-ref="Quartz-VFC-plu" responseTimeout="10000" doc:name="Run every day at 4:00am EST">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <logger message="CRON: PLU Database to Square for Nautica" level="INFO" doc:name="Logger"/>
        <set-session-variable variableName="brand" value="nautica" doc:name="Set brand: nautica"/>
        <flow-ref name="VFC:plu-database-to-square-for-brand" doc:name="VFC:plu-database-to-square-for-brand"/>
    </flow>
    <flow name="VFC:VFO:plu-trigger-database-to-square" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-vfo-PLU-daily-1509908999" cronExpression="0 0 4 * * ? *" cronTimeZone="America/New_York" repeatInterval="0" connector-ref="Quartz-VFO-plu" responseTimeout="10000" doc:name="Run every day at 4:00am EST">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <logger message="CRON: PLU Database to Square for VF Outlet" level="INFO" doc:name="Logger"/>
        <set-session-variable variableName="brand" value="vfo" doc:name="Set brand: vfo"/>
        <flow-ref name="VFC:plu-database-to-square-for-brand" doc:name="VFC:plu-database-to-square-for-brand"/>
    </flow>
    <flow name="VFC:clean-plu-sale-db" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-PLU-db-clean-1509907119" cronExpression="0 0 12 * * ? *" repeatInterval="0" connector-ref="Quartz-VFC-plu" responseTimeout="10000" doc:name="Run every day at 12:00pm PST" cronTimeZone="America/Los_Angeles">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="lookbackDate" value="#[server.dateTime.plusWeeks(-1).format(&quot;MMddyyyy&quot;)]" doc:name="Set one-week old lookbackDate: mmddYYYY"/>
        <logger message="CRON: VFC clean stale PLU sale records from database. Current: #[server.dateTime.format(&quot;MMddyyyy&quot;)] --- Lookback: #[flowVars.lookbackDate]" level="INFO" doc:name="Logger"/>
        <db:delete config-ref="MySQL_Configuration" doc:name="Delete stale sale records from database">
            <db:parameterized-query><![CDATA[DELETE FROM vfcorp_plu_sale_events WHERE STR_TO_DATE(#[flowVars.lookbackDate], '%m%d%Y') > STR_TO_DATE(dateSaleEnds, '%m%d%Y');]]></db:parameterized-query>
        </db:delete>
        <logger message="CRON: Deleted records for lookback period (#[flowVars.lookbackDate]) -- [payload]" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="VFC:daily-plu-sftp-reset" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-PLU-sftp-reset-1509907999" cronExpression="0 10 3 * * ? *" repeatInterval="0" connector-ref="Quartz-VFC-plu" responseTimeout="10000" doc:name="Run every day at 3:10am EST" cronTimeZone="America/New_York">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="brand" value="%" doc:name="Set brand: %"/>
        <component doc:name="Check deployment SFTP processing folders for stale PLUs">
		    <prototype-object class="vfcorp.PluProcessingResetCallable"/>
		</component>
    </flow>
    <flow name="VFC:trigger-plu-sftp-reset">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/vfc/plu/reset/${urlKey}/{brand}" doc:name="/plu/reset"/>
        <set-variable variableName="brand" value="#[message.inboundProperties.'http.uri.params'.brand]" doc:name="Set brand"/>
        <component doc:name="Check deployment SFTP processing folders for stale PLUs">
		    <prototype-object class="vfcorp.PluProcessingResetCallable"/>
		</component>
        <set-payload value="Running PLU processing reset for VFC brand: #[flowVars.brand]" doc:name="Set Payload"/>
    </flow>
    <flow name="VFC:Vans-sync-whitelist" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-plu-sftp-1490636323" cronExpression="0 0/20 * 1/1 * ? *" repeatInterval="0" connector-ref="Quartz-VFC-plu-whitelist" responseTimeout="10000" doc:name="Run every 20 minutes">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="brand" value="vans" doc:name="brand: vans"/>
        <set-variable variableName="enabled" value="${vfcorp.vans.plu.whitelist.enabled}" doc:name="enabled: vans"/>
        <set-variable variableName="sftpPath" value="${vfcorp.vans.sftp.path.whitelist}" doc:name="sftpPath: vans"/>
        <set-variable variableName="encryptionKey" value="${vfcorp.vans.encryption.key}" doc:name="encryptionKey"/>
        <flow-ref name="VFC:sync-whitelist-for-brand" doc:name="VFC:sync-whitelist-for-brand"/>
    </flow>
    <flow name="VFC:Test-sync-whitelist" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-plu-sftp-14906363888" cronExpression="0 50 * 1/1 * ? *" repeatInterval="0" connector-ref="Quartz-VFC-plu-whitelist" responseTimeout="10000" doc:name="Run every :50 minute">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <set-variable variableName="brand" value="test" doc:name="brand: test"/>
        <set-variable variableName="enabled" value="${vfcorp.test.plu.whitelist.enabled}" doc:name="enabled: test"/>
        <set-variable variableName="sftpPath" value="${vfcorp.test.sftp.path.whitelist}" doc:name="sftpPath: test"/>
        <set-variable variableName="encryptionKey" value="${vfcorp.test.encryption.key}" doc:name="encryptionKey"/>
        <flow-ref name="VFC:sync-whitelist-for-brand" doc:name="VFC:sync-whitelist-for-brand"/>
    </flow>
    <sub-flow name="VFC:sync-whitelist-for-brand">
        <set-variable variableName="archiveFolder" value="#[flowVars.brand + '/whitelist']" doc:name="Archive bucket/folder"/>
        <component doc:name="Check SFTP for whitelist file(s)">
            <prototype-object class="vfcorp.WhitelistSyncToDatabaseCallable"/>
        </component>
    </sub-flow>
    <flow name="VFC:vans-trigger-whitelist">
        <http:listener config-ref="${default.http.config}" path="/vfc/whitelist/${urlKey}" doc:name="/vfc/whitelist"/>
        <set-session-variable variableName="brand" value="#[message.inboundProperties.'http.query.params'.brand]" doc:name="Set brand to session"/>
        <async doc:name="Async">
            <choice doc:name="test / vans">
                <when expression="#[sessionVars.brand.equals(&quot;test&quot;)]">
                    <logger message="Intiiating whitelist sync for Test..." level="INFO" doc:name="Logger"/>
                    <flow-ref name="VFC:Test-sync-whitelist" doc:name="VFC:Test-sync-whitelist"/>
                </when>
                <otherwise>
                    <logger message="Intiiating whitelist sync for Vans..." level="INFO" doc:name="Logger"/>
                    <flow-ref name="VFC:Vans-sync-whitelist" doc:name="VFC:Vans-sync-whitelist"/>
                </otherwise>
            </choice>
        </async>
        <set-payload value="Ran whitelist sync for brand: #[sessionVars.brand]" doc:name="Set Payload"/>
    </flow>
    <flow name="VFC:daily-VANS-whitelist-sftp-reset" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="quartz-vfc-whitelist-sftp-reset-1509907999" cronExpression="0 10 0 * * ? *" cronTimeZone="America/New_York" repeatInterval="0" connector-ref="Quartz-VFC-plu-whitelist" responseTimeout="10000" doc:name="Run every day at 12:10am EST">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <component doc:name="Check SFTP for stale WHITELISTS">
            <prototype-object class="vfcorp.WhitelistProcessingResetCallable"/>
        </component>
    </flow>
</mule>
