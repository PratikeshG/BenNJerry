<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:smtps="http://www.mulesoft.org/schema/mule/smtps" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:secure-property-placeholder="http://www.mulesoft.org/schema/mule/secure-property-placeholder" xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/secure-property-placeholder http://www.mulesoft.org/schema/mule/secure-property-placeholder/current/mule-secure-property-placeholder.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/smtps http://www.mulesoft.org/schema/mule/smtps/current/mule-smtps.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd">
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="8081" doc:name="HTTP_Listener_Configuration"/>
    <http:listener-config name="HTTPS_Listener_Configuration"  host="0.0.0.0" port="8082" doc:name="HTTPS_Listener_Configuration"  protocol="HTTPS">
    	<tls:context>
            <tls:key-store type="jks" path="keystore.jks" alias="mule" keyPassword="${keystore.password}" password="${keystore.password}"/>
        </tls:context>
    </http:listener-config>
    <db:mysql-config name="MySQL_Configuration" host="${mysql.ip}" port="${mysql.port}" user="${mysql.user}" password="${mysql.password}" database="${mysql.database}" doc:name="MySQL Configuration">
		<db:pooling-profile maxPoolSize="40" minPoolSize="10"/>
        <reconnect-forever frequency="5000" />
    </db:mysql-config>
    <configuration defaultExceptionStrategy-ref="globalExceptionCatchingStrategy" doc:name="Configuration">
        <http:config useTransportForUris="false"/>
    </configuration>
    <s3:config name="Amazon_S3__Configuration" accessKey="${aws.accesskey}" secretKey="${aws.secretkey}" connectionTimeout="1800000" maxConnections="150" socketTimeout="1800000" doc:name="Amazon S3: Configuration"/>
    <http:request-config name="Pagerduty_HTTPS_Config" protocol="HTTPS" host="events.pagerduty.com" port="443" doc:name="HTTP Request Configuration"/>

    <smtp:gmail-connector name="SES_SMTP_STARTTLS" validateConnections="true" doc:name="Gmail"/>
    <smtp:gmail-connector name="SES_SMTP_STARTTLS_HTML" contentType="text/html" validateConnections="true" doc:name="Gmail"/>
    <secure-property-placeholder:config name="Secure_Property_Placeholder" key="${mule.decryptionKey}" location="${mule.env}.mi.properties,${mule.env}.vfcorp.properties,${mule.env}.urbanspace.properties,${mule.env}.tntfireworks.properties,${mule.env}.benjerrys.properties" doc:name="Secure Property Placeholder"/>
    <sub-flow name="GLOBAL:set-session-vars">
        <set-session-variable variableName="apiUrl" value="${api.url}" doc:name="Set API URL"/>
        <set-session-variable variableName="apiVersion" value="${api.version}" doc:name="Set API Version"/>
        <set-session-variable variableName="domainUrl" value="${domain.url}" doc:name="Set Domain URL"/>
    </sub-flow>
    <catch-exception-strategy name="globalExceptionCatchingStrategy">
        <remove-session-variable variableName="token" doc:name="Redact any token value"/>
        <set-variable variableName="exceptionValue" value="#[exception.toString().replace(&quot;\&quot;&quot;,&quot;'&quot;)]" doc:name="Sanitized exceptionValue"/>
        <set-variable variableName="exceptionMessage" value="#[exception.?cause.?message.replace(&quot;\&quot;&quot;,&quot;'&quot;)]" doc:name="Sanitized exceptionMessage"/>
        <logger message="#[flowVars.exceptionValue + '\n' + flowVars.exceptionMessage]" level="ERROR" doc:name="Log error to console"/>
        <set-variable variableName="exceptionPayload" value="{&quot;routing_key&quot;: &quot;${pagerduty.key}&quot;, &quot;event_action&quot;: &quot;trigger&quot;, &quot;payload&quot;: {&quot;summary&quot;: &quot;#['${mule.env}'.toUpperCase() + ' ' + flowVars.exceptionValue]&quot;, &quot;source&quot;: &quot;Square Bridge&quot;, &quot;severity&quot;: &quot;error&quot;, &quot;custom_details&quot;: { &quot;env&quot;: &quot;${mule.env}&quot;, &quot;app_name&quot;: &quot;#[app.name]&quot;, &quot;exception&quot;: &quot;#[flowVars.exceptionValue]&quot;, &quot;exception_message&quot;: &quot;#[flowVars.exceptionMessage]&quot;}}}" doc:name="exceptionPayload"/>
        <choice doc:name="Choice">
            <when expression="#['${mule.env}'.equals('production')]">
                <set-payload value="#[flowVars.exceptionPayload]" doc:name="Set Payload"/>
                <http:request config-ref="Pagerduty_HTTPS_Config" path="v2/enqueue" method="POST" doc:name="Pagerduty">
                    <http:request-builder>
                        <http:header headerName="Content-Type" value="application/json"/>
                    </http:request-builder>
                </http:request>
            </when>
            <otherwise>
                 <logger message="DEVELOPMENT - #[flowVars.exceptionPayload]" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </catch-exception-strategy>
</mule>
